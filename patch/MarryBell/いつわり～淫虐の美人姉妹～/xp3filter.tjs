@set(_DEBUG=0)

class cxdec
{
    var EncryptionControlBlock;
	var address_list;
	
	function cxdec() {
	    EncryptionControlBlock = [];
        var tempBlock = <%
20 45 6E 63 72 79 70 74 69 6F 6E 20 63 6F 6E 74 72 6F 6C 20 62 6C 6F 63 6B 20 2D 2D 20 53 74 61
74 69 63 61 6C 6C 79 20 6F 72 20 64 79 6E 61 6D 69 63 61 6C 6C 79 2C 20 64 69 72 65 63 74 6C 79
20 6F 72 20 69 6E 64 69 72 65 63 74 6C 79 2C 20 75 73 69 6E 67 20 74 68 69 73 20 70 72 6F 67 72
61 6D 20 61 6E 64 2F 6F 72 20 62 6C 6F 63 6B 20 66 72 6F 6D 20 6F 74 68 65 72 20 70 72 6F 67 72
61 6D 73 20 77 69 6C 6C 20 62 65 20 69 6C 6C 65 67 61 6C 20 62 79 20 74 68 65 20 6C 69 63 65 6E
73 65 20 61 67 72 65 65 6D 65 6E 74 2E 20 82 B1 82 CC 83 76 83 8D 83 4F 83 89 83 80 82 E2 83 75
83 8D 83 62 83 4E 82 F0 81 41 90 C3 93 49 82 C5 82 A0 82 EA 93 AE 93 49 82 C5 82 A0 82 EA 81 41
92 BC 90 DA 93 49 82 C5 82 A0 82 EA 8A D4 90 DA 93 49 82 C5 82 A0 82 EA 81 41 91 BC 82 CC 83 76
83 8D 83 4F 83 89 83 80 82 A9 82 E7 97 70 82 A2 82 E9 82 B1 82 C6 82 CD 83 89 83 43 83 5A 83 93
83 58 82 C9 82 E6 82 E8 8B D6 82 B6 82 E7 82 EA 82 C4 82 A2 82 DC 82 B7 81 42 0A 88 C4 93 E0 82
C9 8F 91 82 A2 82 C4 82 A0 82 C1 82 BD 89 77 82 C5 89 BA 8E D4 82 B5 81 41 83 76 83 89 83 62 83
67 83 74 83 48 81 5B 83 80 82 C9 8D 7E 82 E8 97 A7 82 C2 81 42 8F AC 82 B3 82 C8 91 D2 8D 87 8E
BA 82 AA 83 7C 83 63 83 8A 82 C6 82 A0 82 E9 82 BE 82 AF 82 CC 96 B3 90 6C 89 77 82 C5 81 41 82
DC 82 ED 82 E8 82 C9 90 6C 89 C6 82 CD 8C A9 82 A0 82 BD 82 E7 82 C8 82 A2 81 42 0A 82 B1 82 CC
89 77 82 C5 8D 7E 82 E8 82 E9 8F E6 8B 71 82 CD 96 6C 88 EA 90 6C 82 BE 82 AF 82 E7 82 B5 82 AD
81 41 97 F1 8E D4 82 CD 8D 8C 89 B9 82 F0 96 C2 82 E7 82 B5 82 C8 82 AA 82 E7 96 FB 8F 4C 82 A2
89 8C 82 C6 82 C6 82 E0 82 C9 91 96 82 E8 8B 8E 82 C1 82 C4 82 A2 82 C1 82 BD 81 42 97 F1 8E D4
82 CC 83 47 83 93 83 57 83 93 89 B9 82 AA 8F C1 82 A6 82 C4 82 A2 82 AD 82 C6 81 41 8D A1 93 78
82 CD 90 E4 82 CC 96 C2 82 AB 90 BA 82 AA 83 4B 83 93 83 4B 83 93 82 C6 93 AA 82 C9 8B BF 82 A2
82 C4 82 AD 82 E9 81 42 0A 83 6F 83 62 83 4F 82 A9 82 E7 8E 96 91 4F 82 C9 92 B2 82 D7 82 C4 88
F3 8D FC 82 B5 82 C4 82 AB 82 BD 92 6E 90 7D 82 F0 88 F8 82 C1 92 A3 82 E8 8F 6F 82 B5 81 41 82
A0 82 BD 82 E8 82 F0 8C A9 89 F1 82 B7 81 42 91 75 82 E2 82 A9 82 C8 8E 52 82 CC 8D 81 82 E8 82
AA 97 C1 82 B5 82 A2 95 97 82 C6 82 C8 82 C1 82 C4 90 81 82 AB 95 74 82 AF 82 C4 82 AB 82 BD 81
42 82 A8 82 A8 82 A9 82 BD 82 CC 95 FB 8A 70 82 CC 8C A9 93 96 82 CD 82 C2 82 A2 82 BD 82 AA 81
41 82 B5 82 A9 82 B5 82 A2 82 DC 82 A2 82 BF 92 6E 90 7D 82 C6 8E C0 8D DB 82 CC 92 6E 8C 60 82
C6 82 AA 82 A9 82 DD 8D 87 82 ED 82 C8 82 A2 81 42 82 B5 82 CE 82 E7 82 AD 95 E0 82 AD 82 B1 82
C6 82 C9 82 C8 82 E8 82 BB 82 A4 82 BE 81 41 82 C6 82 BD 82 DF 91 A7 82 F0 82 C2 82 AB 82 C2 82
C2 81 41 91 D2 8D 87 8E BA 82 C9 93 FC 82 C1 82 BD 81 42 0A 91 D2 8D 87 8E BA 82 CC 92 86 82 CD
82 D0 82 F1 82 E2 82 E8 82 C6 82 B5 82 C4 82 A2 82 C4 81 41 90 E4 82 CC 96 C2 82 AB 90 BA 82 E0
88 EA 92 69 82 C6 90 C3 82 A9 82 C9 95 B7 82 B1 82 A6 82 E9 81 42 88 C3 82 A2 8E BA 93 E0 82 C9
96 DA 82 AA 82 C8 82 EA 82 C4 82 AD 82 E9 82 C6 81 41 92 B7 88 D6 8E 71 82 C9 8E E1 82 A2 8F 97
90 AB 82 AA 8D 98 8A 7C 82 AF 82 C4 8B 8F 96 B0 82 E8 82 F0 82 B5 82 C4 82 A2 82 E9 82 CC 82 AA
96 DA 82 C9 93 FC 82 C1 82 BD 81 42 97 F1 8E D4 82 F0 91 D2 82 C1 82 C4 82 A2 82 BD 82 CC 82 BE
82 EB 82 A4 82 A9 81 42 97 F1 8E D4 82 CD 82 A2 82 DC 92 CA 82 E8 89 DF 82 AC 82 C4 82 A2 82 C1
82 BD 82 CC 82 BE 82 AA 81 63 81 42 0A 89 77 91 4F 82 CC 82 BF 82 E5 82 C1 82 C6 82 B5 82 BD 92
93 8E D4 8F EA 82 C9 96 DA 82 F0 8C FC 82 AF 82 E9 82 C6 83 6F 83 58 82 AA 8E 7E 82 DC 82 C1 82
C4 82 A2 82 BD 81 42 82 B1 82 CC 89 77 82 A9 82 E7 83 6F 83 58 82 AA 8F 6F 82 C4 82 A2 82 E9 82
C6 82 CD 92 6D 82 E7 82 C8 82 A9 82 C1 82 BD 82 AA 81 41 82 E0 82 B5 82 A9 82 B5 82 BD 82 E7 98
48 82 F0 8F DA 82 B5 82 AD 8B B3 82 A6 82 C4 82 AD 82 EA 82 E9 82 A9 82 E0 82 B5 82 EA 82 C8 82
A2 82 B5 81 41 89 5E 82 AA 97 C7 82 AF 82 EA 82 CE 96 DA 93 49 92 6E 82 DC 82 C5 82 CC 83 6F 83
58 82 A9 82 E0 82 B5 82 EA 82 C8 82 A2 81 42 0A 82 BB 82 EA 82 C9 82 B5 82 C4 82 E0 81 41 8C BE
82 C1 82 C4 82 CD 88 AB 82 A2 82 AA 83 7B 83 8D 82 AD 82 B3 82 A2 83 6F 83 58 82 BE 81 42 89 98
82 A2 82 C6 82 A2 82 A4 82 ED 82 AF 82 C5 82 CD 82 C8 82 A2 82 AA 81 41 92 B7 94 4E 8E 67 82 ED
82 EA 82 C4 82 AB 82 BD 82 F1 82 BE 82 EB 82 A4 82 C8 81 41 82 C6 82 A2 82 A4 8A B4 82 B6 82 F0
8E F3 82 AF 82 E9 81 42 89 5E 93 5D 91 E4 82 C9 82 CD 90 6C 82 CC 97 C7 82 B3 82 BB 82 A4 82 C8
98 56 90 6C 82 AA 8D C0 82 C1 82 C4 82 A2 82 BD 81 42 0A 96 6C 82 AA 81 75 82 A0 82 CC 81 5B 81
76 82 C6 90 BA 82 F0 82 A9 82 AF 82 E9 82 C6 81 41 94 DE 82 CD 89 5E 93 5D 91 E4 82 A9 82 E7 90
67 82 F0 8F E6 82 E8 8F 6F 82 B5 82 C4 81 75 92 42 95 76 82 B3 82 F1 82 A9 82 A6 81 48 81 76 82
C6 96 6C 82 CC 96 BC 91 4F 82 F0 82 A2 82 A2 81 41 83 47 83 93 83 57 83 93 82 F0 82 A9 82 AF 82
BD 81 42 0A 96 6C 82 CD 8B C1 82 A2 82 C4 81 75 82 A6 81 48 82 C8 82 F1 82 C5 96 6C 82 CC 96 BC
91 4F 82 F0 92 6D 82 C1 82 C4 82 E9 82 F1 82 C5 82 B7 82 A9 81 48 81 76 82 C6 90 75 82 AD 82 C6
81 41 94 DE 82 CD 81 75 94 FC 97 44 82 BF 82 E1 82 F1 82 CD 82 C7 82 A4 82 B7 82 BD 81 48 81 76
82 C6 96 6C 82 C9 90 75 82 AB 95 D4 82 B7 81 42 0A 81 75 82 A0 81 41 81 76 82 C6 96 6C 82 CD 91
D2 8D 87 8E BA 82 C9 88 F8 82 AB 95 D4 82 B7 81 42 82 DC 82 B3 82 A9 82 A0 82 CC 8F 97 90 AB 81
63 8B 7B 8E C0 82 B3 82 F1 81 48 0A 91 D2 8D 87 8E BA 82 C5 82 A2 82 DC 82 BE 83 52 83 4E 83 8A
83 52 83 4E 83 8A 82 C6 8B 8F 96 B0 82 E8 82 F0 82 B5 82 C4 82 A2 82 E9 94 DE 8F 97 82 CC 91 4F
82 C9 97 A7 82 BF 81 41 8B FC 82 F1 82 C5 81 75 8B 7B 8E C0 82 B3 82 F1 81 48 81 76 82 C6 90 BA
82 F0 82 A9 82 AF 82 BD 81 42 82 B3 82 C1 82 AB 82 CD 8B 43 82 C3 82 A9 82 C8 82 A9 82 C1 82 BD
82 AA 81 41 82 BD 82 B5 82 A9 82 C9 8B 7B 8E C0 82 B3 82 F1 82 BE 81 42 94 DE 8F 97 82 CD 96 6C
82 CC 8C BE 97 74 82 C9 8A E7 82 F0 82 A0 82 B0 81 41 96 6C 82 CC 8A E7 82 F0 82 B5 82 CE 82 E7
82 AD 8C A9 82 C4 82 A2 82 BD 82 AA 81 41 82 A2 82 AB 82 C8 82 E8 8B 43 82 C3 82 A2 82 BD 82 E6
82 A4 82 C9 81 75 82 A0 81 41 92 42 95 76 8C 4E 81 48 81 76 82 C6 8C BE 97 74 82 F0 94 AD 82 B5
81 41 82 BB 82 B5 82 C4 82 C9 82 C1 82 B1 82 E8 82 C6 8F CE 82 C1 82 BD 81 42 0A B8 64 06 DC 18
8D CF E1 B4 58 A4 B8 FB 27 49 63 79 71 78 16 22 05 C2 0C 4B D5 6D 97 93 A6 C7 3E 20 4C 1D A9 54
22 ED CA 27 19 1E 6B 5F C9 4C 56 19 CB 9A 0C 09 D9 09 95 F2 91 CC 0F 54 6E 4C 66 CC B2 B7 02 7F
8F 54 A5 AD CE 33 2D 92 4A 06 24 94 A4 29 05 5B F0 33 FB 2F 18 CB F4 13 D0 59 47 4D 45 FD D9 64
38 13 0A 59 13 65 A5 1E 7C 31 4D 51 28 4F BC 65 58 A6 7F E7 35 AE FC 19 17 3C 48 CD 4E 1F A5 CE
85 63 65 DA DD 8A 1D 33 45 2F 90 0B 48 AD 12 04 B5 DA 37 98 F2 7C DA 09 14 44 14 CA 96 8C 1F E0
73 4E 09 18 B2 CF F7 81 5D E2 C6 02 B7 B5 7D BC 2C 4C 1F 11 02 25 07 E3 98 E9 EC 43 3A 8C 16 1D
D2 23 8A 99 6E A0 13 90 94 B0 D5 77 CD FF 71 56 68 8B 76 A6 B9 28 11 84 0D 25 54 8C 7E 39 6D E0
07 33 80 FF FF C2 FA F9 3A 26 3F 7F 38 F9 BF 9A 29 BE 7F AE B2 0C 19 45 2D 73 A2 DF 67 BF 19 86
CA E5 D9 07 A9 4C C9 9B 24 A4 C2 98 56 51 84 B9 7F D9 CF 54 48 66 D5 09 C8 75 94 49 3F 32 25 3F
68 B4 54 AC F4 17 CC 18 3D 4D A6 8F 5B 0C B6 67 12 7D D3 5A 2C 67 8D B0 01 21 A9 5A 73 67 2E 51
B2 EC 07 01 A8 54 68 A4 C0 48 84 37 A0 02 4D 18 DB 49 47 42 24 3C 1F 44 90 B1 E4 A7 C7 A8 E8 C6
FC 82 5A 6C 36 05 25 9C 82 4F CA 67 8F 1C D4 6A EB 90 F2 72 C9 2E AD F4 31 62 1D C8 7F 93 CA EA
AF EC 0B 57 62 71 8D 1F 26 B5 3A C8 1C 5F FD 0C 23 BB 56 B9 79 93 DB 9D 23 04 00 2A 78 E9 4C 1E
06 D5 5B 2E F0 32 6F 4A 67 99 69 9C B7 4B FC F0 79 97 E1 55 52 98 72 E3 BA CD 0D 1D 8E 41 8C E7
53 79 CD 34 3E 88 30 A9 D0 C5 C1 62 3B FA 48 4E 6A 05 51 89 1B C0 D1 8F 1C 88 98 48 72 F5 C0 60
BA 7C 7B 0D 2A 07 45 C3 86 86 80 32 12 16 EF 70 72 E7 28 7E EE CF D8 7E 87 81 F9 D1 FB 32 1A E4
F4 15 91 B4 E6 03 BB E6 AD 58 B8 C6 9E 51 10 F7 25 38 FE B0 66 DC BD CF 88 19 CA 66 45 FB A7 96
BE FD 51 A7 CA DA B1 86 6E 51 7F 70 D0 6C DF 05 68 83 FC 9D B6 D7 B9 B6 44 47 0C 07 AB 95 74 A9
D6 83 0E 68 72 29 59 27 08 66 2E BE 03 43 A6 91 38 59 63 99 E0 EF 98 8C 32 03 94 18 61 9A A3 28
63 D9 33 4A 3B E3 7C 95 8A A4 82 D9 11 2E F0 F5 60 5E B5 8D 81 A8 CE EE DE 0C 77 85 AC F8 FB A0
1D C7 EC 89 5A 9E A6 2D 9C 9A 90 BC DC 20 CE 63 C6 4B C7 23 B3 2D 4E 2A 58 70 E3 76 27 31 C7 71
80 C6 37 E3 14 48 63 22 36 EC AA 66 D6 1B 73 0C CF 5C D7 1C 68 FA 52 B4 B2 E8 97 BF AF DC 15 11
5D 54 FD D7 05 0D 9A 2A E6 D1 3D 58 97 F6 A9 79 E6 E1 E1 0A 66 50 A8 27 95 FC E7 74 E7 10 85 08
49 15 E5 0E DC F1 FE 4E BF 84 75 E9 0F E0 3A 43 09 8E 69 D6 74 F5 30 1C FC FA 6B 2D 93 FE D0 84
6B FE 1B 70 1D 4B 1F AD 54 55 84 54 D9 47 49 4B 09 AD C6 7D C0 70 E0 B6 76 33 8D E6 A0 E6 C0 78
D0 4B 21 E9 5D B6 D8 79 1F F6 3E A8 EB 6E 79 02 50 0A 22 BB 0C 1E C0 97 18 8C 20 F1 3A 5E B1 07
8B 87 4B CD 3A 20 60 3A 30 30 E0 F7 DD 6F 01 B2 96 B5 7C 66 8D 00 70 08 77 FF B5 23 53 D2 49 F9
AD 99 73 C2 D0 4E EC 77 55 CF 67 D9 DB F3 C0 A4 AA 91 D8 26 09 6D D0 F5 90 09 E5 A3 B3 6E AB 3E
2F 24 34 F0 A3 44 47 10 B7 E1 D4 B7 17 3F 94 78 2F 29 7B 75 B1 7C C4 CE 43 3C 9C AF B2 64 A2 C5
A1 A4 0F D5 CB DF E2 77 BD FA 7C 91 41 91 A3 61 5C 89 10 E5 34 1A 56 89 74 0B 19 47 7E 7A 0E 06
80 E7 DB 04 53 9C B0 31 65 40 8A 29 F4 45 A3 A5 EB F0 18 C8 C7 89 A5 1B 09 03 21 00 0B 5A 4E 77
61 4F 2E D1 D8 51 E7 9A 91 C0 2D 55 5B C5 E3 E2 99 33 53 85 B4 4D 4F D2 7E B0 3A 42 8D F3 9C 35
3E D3 06 A6 5F 92 D3 0F A8 99 54 10 17 82 41 B4 BB 0A 99 5A 17 3E 4D DD 22 32 D0 4A 5F F4 00 84
62 ED B5 41 6E FC 53 C2 10 6F D6 EA DA 2F B2 10 F6 C3 D4 04 A1 0B 95 42 DA C1 74 6A AF F6 59 D8
2E AB FE 33 60 3B 0C FB CA 78 DE B4 3F 55 BF 7D 06 FB 84 98 D8 24 36 88 8E 14 3A B4 2E D3 89 69
88 31 79 24 E7 96 23 C2 24 81 57 86 60 9D 34 C7 77 2B BB 3F 54 CD 61 8B 27 2B 78 53 A4 A5 B7 96
D7 A4 25 FB B1 50 63 66 07 58 C6 89 DD 0B 61 4A 6E 88 A0 62 03 20 4C 3C 75 53 1C C3 5A F2 6B 4E
98 BE 43 B6 89 47 AF C9 AB E1 3E 8D EA E1 BA 3D 11 A0 1F 82 96 7A 6F 4F 5E 06 A3 85 6D CE 56 C8
1A 1F 16 A8 07 68 65 71 5D 14 EB A5 5F B6 48 55 09 D2 24 F3 81 8B 58 BC 86 8B A4 EB A0 D4 AA 4C
44 F8 B7 A6 DD F6 C1 78 70 6C 88 65 6A 77 96 1D 17 C5 74 DC DD A7 A8 0D 6C F1 F5 B1 FA B0 DC F8
FE 01 93 59 BC 89 CA 3D B8 77 EA 4B E9 54 86 35 CB 1F A5 F9 99 7A 14 75 1D 48 F2 13 C3 27 77 ED
33 33 6C 80 AB FB E3 62 6F DB 26 55 90 50 CB 4F CD 9C A2 49 23 EF 66 38 FE 36 19 8F EA FB C9 1F
34 8D D5 9B 57 FB 3D 1C B3 3D D4 C3 B8 C4 EE C3 17 DE 2A E1 03 78 FA 5D B6 74 D1 CE B2 09 24 E8
B6 21 37 41 AD DB E1 47 A6 5A 63 FF CC 4C 7C AE 38 99 4F A7 C1 17 74 31 00 8F C0 B6 5F 3E FF F6
73 E5 D0 5B 61 C4 59 CF 1D 50 15 01 3E D6 C3 DC 43 86 A9 89 39 38 77 93 AD 6A 12 33 CD 5B 65 F9
25 65 61 26 7A 51 75 E8 BF D4 80 0A 00 F7 2A C1 4D A1 91 C3 ED 87 CC B9 4E 29 F8 17 D9 77 E1 28
1E AE ED F6 12 DE 97 08 5E 1D 8C 9B EA 98 27 F5 51 38 47 7B 22 74 52 D9 9D C6 64 86 35 6C 29 39
B3 62 DE DE 9A 31 38 B8 89 26 F8 CC EA E4 C7 C4 AE 43 DE 5B E1 55 68 81 A5 0E AD 2A 37 E7 82 BC
89 BA F1 89 C4 9E E2 57 96 EF 08 55 5E 0C AA BB C8 3A 2C 49 86 C3 46 9F A6 63 51 2F FB 6B 66 9F
71 EE 25 F5 86 52 35 47 2E 8A BD 88 3A 82 05 0D 02 17 1D D9 84 19 A4 79 E2 3A 50 94 5B 3D E2 AB
7A 4C 11 72 FB CD E4 3E DF EF 84 75 D9 8E 20 84 5A 7C 5E DF 1E 1B CD D7 80 0D 6C 3F 8D F7 AB 27
F8 39 0D E8 E4 4F B6 D5 4B 2A 1B F6 93 1D 57 F8 4D 5D 73 2F 2F 4C B7 55 8E E8 CD 9A 55 07 75 B0
94 99 F5 7E C4 21 38 FD D6 CA 02 70 CB 6F 4C 9B 5D 73 42 87 E2 F5 D4 22 1B 6E 70 4F CD A0 3C F8
8A 67 4A 74 E0 1B F7 A6 BC 72 D1 78 F4 07 20 1D F0 FA 77 77 AA C3 DE B4 B8 43 44 30 A3 45 8D F4
EA B3 F2 5B D4 80 D7 47 F8 DB 2F 5D A4 BD 9E 88 D3 C2 40 92 3B 76 22 C3 90 A1 0C 53 5A A3 8B 2C
5B 5C 15 C8 4F D1 8F DA 9D 8E DC F6 CB BE 22 76 53 30 20 F0 1E D6 02 99 1C D7 72 4E B8 37 EC 80
52 9D 5F 25 55 54 2C 7C 20 6E 59 7E 87 79 BB 46 42 FC 6E FB 70 37 F2 28 ED B4 E0 9E C7 C2 FA 4E
DF 6C 52 BF AC B5 0B F1 7B 9A AC B5 CB 32 0E 1C 88 33 53 85 22 5A 7D 74 E5 1E C7 16 64 8C 14 4C
91 1B 42 6A 5F E3 61 7E 2B 0C AF 9A B1 02 63 2E DE 25 50 B1 B9 C0 3F C5 FD 10 69 09 01 EB 2C C5
FC C9 D8 E9 4E 10 E4 6E 42 8F 8F 58 E3 C3 88 D7 14 76 B7 A6 0F DC 9B 28 30 54 DF 9F 65 A1 47 93
C9 2F 43 66 EA 53 11 8F 25 34 4E A7 93 25 0A 88 FC 9F DF 90 90 76 F3 BA FE 10 15 17 69 2E 32 6A
74 96 EF F1 FC D8 C4 82 4E 0B 42 87 F4 7D 5F 72 EC 2C 62 EE 7D FD 04 F4 FA 25 C9 70 3C 89 B9 7E
8F 4E B4 D8 5E 4E 84 CD BC BE 14 B9 1E F4 A0 0E 1E BE BF 56 DC B2 59 CA 0B D0 11 3E D1 FA 00 58
FD 68 BB 04 3F A7 56 4D ED 56 43 16 BD F3 69 65 32 F9 CB 9D 75 18 54 0A AE 1C 54 6B DC F0 7B 96
B8 CA EF DE E2 A9 06 5D 48 76 A1 15 F3 6D 1A 28 CA 96 18 2F 65 89 A9 E3 31 2A CD B2 37 FC 76 E7
        %>;
		
		address_list = []; address_list[127] = void;

		for(var i = 0; i < 4096; i += 4) {
		    EncryptionControlBlock.add(
                (tempBlock[i]) |
                (tempBlock[i+1] << 8) |
                (tempBlock[i+2] << 16) |
                (tempBlock[i+3] << 24)
                );
		}
	}
    
    var xcode_seed;
    function xcode_rand() {
        var seed = xcode_seed;
        xcode_seed = (1103515245 * seed + 12345) & 0xFFFFFFFF;
        //Debug.message("xcode_rand: " + xcode_seed);
        return (xcode_seed ^ (seed << 16) ^ (seed >> 16)) & 0xFFFFFFFF;
    }

    var xcode_op_mov_val = 0;
    var xcode_op_mov_reg = 1;
    var xcode_op_not = 2;
    var xcode_op_neg = 3;
    var xcode_op_inc = 4;
    var xcode_op_dec = 5;
    var xcode_op_add_val = 6;
    var xcode_op_sub_val = 7;
    var xcode_op_xor_val = 8;
    var xcode_op_add_reg = 9;
    var xcode_op_sub_reg = 10;
    var xcode_op_push = 11;
    var xcode_op_pop = 12;
    var xcode_op_shr_reg = 13;
    var xcode_op_shl_reg = 14;
    var xcode_op_imul_reg = 15;
	var xcode_op_load_arg = 16;
    var xcode_op_interlace = 79;
    var xcode_op_table_ECB = 80;

    function xcode_push(xcode, n, inst)
    {
        xcode[0] += n;
        if(xcode[0] > 128) return false;
        xcode.add(inst);
        return true;
    }

    function xcode_building_first_stage(xcode)
    {
        switch (xcode_rand() % 3) {
            case 2
               :// MOV ESI, EncryptionControlBlock : BE
                // MOV EAX, DWORD PTR DS:[ESI+((xcode_rand() & 0x3ff) << 2)]
                xcode[0] += 7;
                if(xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_mov_val, EncryptionControlBlock[xcode_rand() & 0x3ff]]))
                    return false;
                break;
            case 1
               :// MOV EAX, xcode_rand() : B8
                if(++xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_mov_val, xcode_rand()]))
                    return false;
                break;
            case 0
               :// MOV EAX, EDI : C7 8B
                if(!xcode_push(xcode, 2, [xcode_op_load_arg]))
                    return false;
                break;
        }
        return true;
    }

    function xcode_building_stage0(xcode, stage)
    {
        //Debug.message("xcode_building_stage0: " + stage);
        if (stage-- == 1)
            return xcode_building_first_stage(xcode);

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        switch (xcode_rand() & 7) {
            case 3
               :// NOT EAX :D0 F7
                if(!xcode_push(xcode, 2, [xcode_op_not]))
                    return false;
                break;
            case 6
               :// NEG EAX : D8 F7
                if(!xcode_push(xcode, 2, [xcode_op_neg]))
                    return false;
                break;
            case 7
               :// INC EAX : 40
                if(!xcode_push(xcode, 1, [xcode_op_inc]))
                    return false;
                break;
            case 2
               :// DEC EAX :48
                if(!xcode_push(xcode, 1, [xcode_op_dec]))
                    return false;
                break;
            case 0
               :// PUSH EBX : 53
                // MOV EBX, EAX
                // AND EBX, AAAAAAAA
                // AND EAX, 55555555
                // SHR EBX, 1
                // SHL EAX, 1
                // OR EAX, EBX
                // POP EBX
                if(!xcode_push(xcode, 21, [xcode_op_interlace]))
                    return false;
                break;
            case 5
               :// XOR EAX, xcode_rand() : 35
                if(++xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_xor_val, xcode_rand()]))
                    return false;
                break;
            case 4
               :if ( xcode_rand() & 1) {
					if(++xcode[0] > 128) return false;
                    // ADD EAX, xcode_rand()
                    if(!xcode_push(xcode, 4, [xcode_op_add_val, xcode_rand()]))
                        return false;
                } else {
					if(++xcode[0] > 128) return false;
                    // SUB EAX, xcode_rand()
                    if(!xcode_push(xcode, 4, [xcode_op_sub_val, xcode_rand()]))
                        return false;
                }
                break;
            case 1
               :// MOV ESI, EncryptionControlBlock : BE
                // AND EAX, 3FFh
                // MOV EAX, DWORD PTR DS:[ESI+EAX*4]
                if(!xcode_push(xcode, 1+4+1+4+3, [xcode_op_table_ECB]))
                    return false;
                break;
        }
        return true;
    }

    function xcode_building_stage1(xcode, stage)
    {
        //Debug.message("xcode_building_stage1: " + stage);
        if (stage-- == 1)
            return xcode_building_first_stage(xcode);
        
        // PUSH EBX
        if(!xcode_push(xcode, 1, [xcode_op_push])) return false;

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        // MOV EBX, EAX
        if(!xcode_push(xcode, 2, [xcode_op_mov_reg]))
            return false;

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        switch (xcode_rand() % 6) {
            case 4
               :// ADD EAX, EBX  : D8 01
                if(!xcode_push(xcode, 2, [xcode_op_add_reg]))
                    return false;
                break;
            case 5
               :// SUB EAX, EBX : D8 29
                if(!xcode_push(xcode, 2, [xcode_op_sub_reg]))
                    return false;
                break;
            case 3
               :// NEG EAX, ADD EAX, EBX : D8 F7
                if(!xcode_push(xcode, 2, [xcode_op_neg]) ||
                   !xcode_push(xcode, 2, [xcode_op_add_reg]))
                    return false;
                break;
            case 1
               :// IMUL EAX, EBX : C3 AF 0F
                if(!xcode_push(xcode, 3, [xcode_op_imul_reg]))
                    return false;
                break;
            case 0
               :// PUSH ECX : 51
                // MOV ECX, EBX
                // AND ECX, 0F
                // SHL EAX, CL : E0 D3
                // POP ECX
                if(!xcode_push(xcode, 1+2+3+2+1, [xcode_op_shl_reg]))
                    return false;
                break;
            case 2
               :// PUSH ECX : 51
                // MOV ECX, EBX
                // AND ECX, 0F
                // SHR EAX, CL : E8 D3
                // POP ECX
                if(!xcode_push(xcode, 1+2+3+2+1, [xcode_op_shr_reg]))
                    return false;
                break;
        }
        // POP EBX
        if(!xcode_push(xcode, 1, [xcode_op_pop]))
            return false;
        return true;
    }

    function xcode_building(seed)
    {
        xcode_seed = seed;
        var xcode;
        for (var stage = 5; stage > 0; --stage) {
            xcode = [5 + 4]; // xcode limit = 128
            if(xcode_building_stage1(xcode, stage) && xcode[0] + 5 + 1 <= 128)
                break;
        }
		// compile function
		var funcstr = [
			"function(arg) {",
			"var v,v2,st=[];"
		];
		for (var i = 1; i < xcode.count; ++i) {
            var inst = xcode[i];
			switch(inst[0]) { // op
                case 0://xcode_op_mov_val:
                    funcstr.add("v=" + inst[1] + ";");
                    break;
				case 16://xcode_op_load_arg:
					funcstr.add("v=arg;");
					break;
                case 1://xcode_op_mov_reg:
					funcstr.add("v2=v;");
                    break;
                case 2://xcode_op_not:
					funcstr.add("v^=0xFFFFFFFF;");
                    break;
                case 3://xcode_op_neg:
					funcstr.add("v=-v;v&=0xFFFFFFFF;");
                    break;
                case 4://xcode_op_inc:
					funcstr.add("++v;v&=0xFFFFFFFF;");
                    break;
                case 5://xcode_op_dec:
					funcstr.add("--v;v&=0xFFFFFFFF;");
                    break;
                case 6://xcode_op_add_val:
					funcstr.add("v+=" + inst[1] + ";v&=0xFFFFFFFF;");
                    break;
                case 7://xcode_op_sub_val:
					funcstr.add("v-=" + inst[1] + ";v&=0xFFFFFFFF;");
                    break;
                case 8://xcode_op_xor_val:
					funcstr.add("v^=" + inst[1] + ";");
                    break;
                case 9://xcode_op_add_reg:
					funcstr.add("v+=v2;v&=0xFFFFFFFF;");
                    break;
                case 10://xcode_op_sub_reg:
					funcstr.add("v-=v2;v&=0xFFFFFFFF;");
                    break;
                case 11://xcode_op_push:
					funcstr.add("st.add(v2);");
                    break;
                case 12://xcode_op_pop:
					funcstr.add("v2=st.pop();");
                    break;
                case 13://xcode_op_shr_reg:
					funcstr.add("v>>=v2&0xF;");
                    break;
                case 14://xcode_op_shl_reg:
					funcstr.add("v<<=v2&0xF;v&=0xFFFFFFFF;");
                    break;
                case 15://xcode_op_imul_reg:
					funcstr.add("v*=v2;v&=0xFFFFFFFF;");
                    break;
                case 80://xcode_op_table_ECB:
					funcstr.add("v=EncryptionControlBlock[v&0x3FF];");
                    break;
                case 79://xcode_op_interlace:
                    // PUSH EBX
                    // MOV EBX, EAX
                    // AND EBX, AAAAAAAA
                    // AND EAX, 55555555
                    // SHR EBX, 1
                    // SHL EAX, 1
                    // OR EAX, EBX
                    // POP EBX
					funcstr.add("v = ((v & 0xAAAAAAAA) >> 1) | ((v & 0x55555555) << 1);");
                    break;
            }
		}
		funcstr.add("return v&0xFFFFFFFF;}");
        return funcstr.join("\n")! incontextof this;
    }

    function cxdec_execute_xcode(hash)
    {
        var index = hash & 0x7f;
        hash = hash >> 7;	

        if (!address_list[index]) {
            address_list[index] = xcode_building(index);
        }
        return [address_list[index](hash), address_list[index](hash^0xFFFFFFFF)];
    }

    function __cxdec_decode(hash, offset, buf, len)
    {
        var ret = cxdec_execute_xcode(hash);

        var key_8 = (ret[0] >> 8) & 0xFF;
        var key_9 = (ret[0] >> 16) & 0xFF;
        var key_10 = ret[0] & 0xFF;
        var key1 = ret[1] >> 16;
        var key2 = ret[1] & 0xffff;

        if (key1 == key2)
            ++key2;
	
        if (!key_10)
            key_10 = 1;

        if ((key2 >= offset) && (key2 < offset + len))
            buf[key2 - offset] ^= key_9;
	
        if ((key1 >= offset) && (key1 < offset + len))
            buf[key1 - offset] ^= key_8;

        buf.xor(0, len, key_10);
    }

    function cxdec_decode(hash, offset, buf, len)
    {
        var bondary = (hash & 0x213) + 0x473;
        var dec_len;
        if (offset < bondary) {
            if (offset + len > bondary)
                dec_len = bondary - offset;
            else
                dec_len = len;
            __cxdec_decode(hash, offset, buf, dec_len);
            offset += dec_len;
            buf.ptr += dec_len;
            dec_len = len - dec_len;
        } else
            dec_len = len;

        if (dec_len)
            __cxdec_decode((hash >> 16) ^ hash, offset, buf, dec_len);
    }
}

Storages.setXP3ArchiveExtractionFilter((new cxdec()).cxdec_decode);