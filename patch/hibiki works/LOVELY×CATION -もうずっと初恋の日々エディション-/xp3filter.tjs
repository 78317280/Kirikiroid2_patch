/*
class xp3buffer
{
	function xor(startpos, length, xorvalue); // absolute buffer pos = startpos + this.ptr
	property ptr; // current buffer ptr
	property count; // readonly
}
*/

function fixTLGHdr(buf) {
	// "X" -> 88, "Y" -> 89, "Z" -> 90
	if(buf[3] == 89) { // XXXYYY -> TLG5.0
		buf[0] = 0x54;
		buf[1] = 0x4c;
		buf[2] = 0x47;
		buf[3] = 0x35;
		buf[4] = 0x2e;
		buf[5] = 0x30;
		return true;
	} else if(buf[3] == 90) { // XXXZZZ -> TLG6.0
		buf[0] = 0x54;
		buf[1] = 0x4c;
		buf[2] = 0x47;
		buf[3] = 0x36;
		buf[4] = 0x2e;
		buf[5] = 0x30;
		return true;
	}
	return false;
}

function fixTLG(off, buf) {
	// tricky way to fix TLG header
	switch(off) {
		case 0:
		case 15:
			if(!fixTLGHdr(buf)) {
				// TLG6's width
				if (off == 15) buf[0] ^= 0xAB;
			}
			return;
		case 12:
		case 27: // TLG5's width
		case 30: // TLG6's width
			buf[0] ^= 0xAB;
			return;
		case 16:
		case 31: // TLG5's height
		case 19:
		case 34: // TLG6's height
			buf[0] ^= 0xAC;
			return;
	}
}

Storages.setXP3ArchiveExtractionFilter(function(hash, offset, buf/*xp3buffer*/, len, filename)
{
	var key = [
		(hash >> 8) & 0xFF,
		(hash >> 8) & 0xFF,
		(hash >> 1) & 0xFF,
		(hash >> 7) & 0xFF,
		(hash >> 5) & 0xFF ];
	var buffsize = buf.count;
	for(var i = 0; i < buffsize; ++i) {
		var entryoff = offset + i;
		if(entryoff <= 100) {
			buf[i] ^= hash >> 5;
		} else {
			buf[i] ^= key[entryoff & 4];
		}
	}
	
	if(offset <= 34 && filename.length > 4 && filename.substr(filename.length - 4, 4) == '.tlg') global.fixTLG(offset, buf);
});