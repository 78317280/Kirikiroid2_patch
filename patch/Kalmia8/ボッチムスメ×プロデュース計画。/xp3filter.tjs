@set(_DEBUG=0)

class cxdec
{
    var EncryptionControlBlock;
	var address_list;
	
	function cxdec() {
	    EncryptionControlBlock = [];
        var tempBlock = <%
5B 1B FF 42 BF 6E DE EE 4F 8D E0 1B 4D 91 0D 49 45 63 85 4F 34 6B 73 E5 72 08 E3 1D 47 95 EB 55
2E 27 00 11 CF DA 4B C5 D0 DC 05 32 97 85 E9 3C 98 60 5A 38 D1 4B 69 C6 1F BA 83 B2 0D E6 2F E8
AF EA E5 21 0D 43 FC 3B 66 57 D2 9D 0F 03 E9 22 18 F8 AA 0D 82 96 6A DA 85 D6 73 C4 19 D2 DB 37
9C E7 E4 A0 FB 95 40 EB 90 7E E5 E2 D6 A8 4E 40 87 47 88 5B C4 4B B6 4E CD 01 AD 3D 2C E1 C1 78
F9 21 51 D7 8C 48 AC 3D E7 91 37 06 D9 90 64 28 63 8A 08 0B F3 48 85 E1 E8 8E 29 50 E1 F3 90 74
9D 3E A1 04 D4 29 5A BA 14 E0 BC 10 A3 51 62 43 56 DA 0A 97 19 25 3B 43 A8 02 18 EF 1C 2D 9F B2
08 C0 72 8E 29 CF C1 70 AD C1 17 52 44 EA 36 F0 9C 43 E8 F7 13 FA 57 01 70 ED 64 BA 29 C5 64 27
83 C5 DA 3C 70 45 D5 07 5D 81 88 23 60 4A F1 7D 49 50 2C 0C 05 F8 A7 B9 22 DA 82 13 5E 29 AE 6A
3B C0 21 47 74 8F 45 4C 0D D3 16 DC D2 73 46 89 7D 62 53 22 CB E1 FE A1 9E F5 CC 08 30 A4 96 28
39 90 F5 60 FD 68 06 31 C4 F7 74 DB BC E2 93 CD 8B 61 D6 3E 31 52 F9 61 58 0F 90 9F A9 F5 28 22
8D E6 46 10 8A F1 5B 4A 25 DE 0E 41 CC 26 F1 7A 75 8F 58 AD 55 96 42 55 6E B1 30 35 A9 69 CF 10
48 FA 6F FD CE A8 AE DB DD AB 13 3E 9D C5 05 F4 23 62 55 9F F2 67 96 A0 73 D6 F1 34 8B 0C 62 81
72 E2 7E E9 CB EE 71 C5 FD 2E EE 11 E4 50 63 04 D1 1C 6E 0B EB 5C 29 D3 A3 D3 1B F6 31 46 94 30
54 84 E2 0D C2 59 DF 33 BB 21 E9 1C F9 7B C5 48 8A 26 0F 16 29 E5 70 41 12 8A 58 B2 D4 F5 80 CE
23 D0 BD AF 0B 35 6C AD CB 7F 02 F4 BE 5B 28 45 37 77 92 8F D4 3A AF B5 FA E7 14 48 D0 C6 3E 97
00 55 71 8F 75 2B 54 63 78 2C 43 91 80 4C 20 70 06 4B 6E A7 C0 99 11 0A 67 D9 F9 D5 11 F0 11 3A
53 2E 1C F5 12 81 18 A5 7D 4F 38 0C 93 15 2B 55 95 CE 8C E2 C8 74 3E AD D2 E9 7E F1 E0 5A B5 98
DC F4 41 9B B6 FB 9C 9A 42 00 DC 4B FF 96 E0 46 C1 C9 1D 3F 3D E8 CC 81 95 80 C0 84 D6 A4 2B 50
DF 70 56 54 68 09 19 16 CE FB 32 3C AA 71 04 65 BC 63 2B C5 F7 95 E8 F2 DB D1 67 B8 AC FA 77 DE
58 89 5A AE 02 CA 44 49 C6 D2 3C 58 C3 B4 4B B4 ED 2F 47 9B 91 44 F4 B3 D7 0B 3D 8A A0 19 51 10
F3 CF 5E 0E EC 04 89 E9 84 50 45 92 97 04 2C 9B 28 01 21 F2 19 1B D3 91 88 46 8F 4E 18 53 61 79
9B 38 25 91 4C E8 A2 5A 82 C2 8E C1 DD F9 C0 50 27 B6 87 B5 5D EA 48 46 04 CB 2B 28 3C 78 4C AB
94 06 52 86 45 01 77 25 2F 6D 1A 19 90 50 7C B2 D9 01 6B B4 3D 77 28 B1 77 C5 4C 08 3E 0B 18 80
E7 37 11 2C 9E A9 CF 52 5E EA F0 51 1A 44 BF 3C EC 17 34 95 83 8C 19 23 79 6B E9 0A A9 A1 06 7C
72 81 96 37 92 C3 CB 11 7A 7B 41 4C E4 82 95 DE 35 93 6B A0 F4 04 AE 67 BB 87 B8 ED F7 80 02 71
95 9D E7 17 19 08 7E AE 82 6F 5C 89 89 6C D3 71 6A 2D 92 41 10 87 BB 89 3B 22 74 8C E2 87 20 4D
12 EB 63 C5 54 21 85 F5 DB 85 47 4B CF 6C F0 1F 63 CE D6 BF 24 5F C8 3A C1 3C 5C 0D F3 69 0F 5E
0D 6C FB 41 C3 00 60 A6 9E DA 17 CB 5A 7F 63 42 96 FB 45 E0 61 BA EF 72 BB 98 59 F9 0E 5F E3 CF
69 A5 F9 89 F5 8A CC 58 0A E9 78 C4 8D 42 1D 48 A3 0A 2D AA 5A 2B 1E AA E5 53 E0 38 BE 32 C2 B7
92 8D A6 DB E3 D7 BC E9 07 1B D1 1D 14 E6 D5 BC 61 15 A7 3D 1B 74 49 9A 48 44 CC 91 FB 80 F5 73
45 B2 2B EE 50 D8 2B 4A BD C0 A4 0C EE 0D E5 D8 2E 1B 1E 64 48 BB AA AE 86 1D A7 CB 51 1A 1C DE
F0 3A 69 42 0D DE 28 FF D8 C3 65 13 8B 09 87 FB D1 4C 04 DF 83 B4 5C FC D1 89 FC 93 94 F5 FA 27
87 AE 91 4F 36 8A B4 6D A5 16 95 2D 04 E5 CF 24 A8 E7 F1 58 AD 2F 94 61 99 01 32 04 7D 6E D2 53
20 4F 18 B2 59 1E CC 0F 49 19 02 C7 7A C4 F6 8B 83 B4 C7 C1 BB F9 10 08 1D D2 DA EB 2E 3D 2C 7D
C9 77 F1 9B 5D 32 E2 19 99 4C 87 A1 1B F1 4B 18 74 B2 AB 19 D0 B3 59 6F 92 CF 15 AD 03 92 BB 7C
46 90 43 18 40 96 BE B9 DD C8 1D 88 37 99 A1 88 64 39 06 AF 51 C8 85 59 66 D3 3B D3 65 22 FD 99
BE 7B EC D6 04 FE A5 B9 EC D0 F5 AA 03 2B DB 08 85 C3 5D 87 11 2F 99 C1 EC 79 F9 61 DF CC 3C F5
3A 56 8D 7A 7F AD D3 AF A4 8D 8A 60 32 3B 55 93 FB BF 15 E1 C9 C2 9F 06 28 C5 5A 63 D5 D9 4B ED
57 C9 DD 2A 65 16 54 BB F3 14 54 63 50 76 56 E8 CF 47 00 EF DC F1 F8 8D DA 3B 16 76 26 39 93 F8
F5 BD 38 1D 02 0C 59 4B 33 4E A1 6C B4 F1 6D 95 33 85 B6 7B 9B F0 AE DA 53 2B 9E 8D AE A8 ED 5C
54 78 0E D0 E4 FA E8 1C C4 0F 01 85 0D 96 D0 AC 78 C8 84 FB E4 53 AD C4 7C 31 2A 3C 33 0B 18 30
06 16 EC AF 84 60 61 AE 8F C8 8A 19 A1 70 CD 3F 1B B9 FF 60 75 35 44 7A 5F EE DF AB AF BD 76 62
32 C7 A3 55 D6 C6 6F 0D 18 11 54 61 DE 01 6D 00 19 26 CE AD 7E 2A A4 9D F3 75 8C 0C BC BF A6 E2
F0 28 22 89 EC A4 62 51 A2 E7 E2 40 3F BC BA 95 98 91 12 63 0E FD 8B 1E BB C5 08 0A 08 09 23 2B
5E 9B 20 89 D3 4C 7C 47 F8 3E 9B AB C7 1B 96 13 B3 B5 78 C8 35 C7 86 CC 2D 9D 08 E8 12 5E 9E F9
E8 38 A0 76 70 89 FF 09 39 68 B5 AB DF AC 3B 50 74 88 E7 C3 DF E5 7D E6 C3 57 10 C9 76 33 D1 BC
62 E0 77 5C 04 36 D5 02 0F F2 13 43 F1 6F A9 12 05 88 C3 B1 51 C3 B1 85 43 96 05 03 92 C9 AD 29
52 B4 B4 59 EB B7 3F F9 08 78 71 20 AF 21 AF BD 61 6D 32 C7 67 54 43 9D 78 BB AB BF E0 27 CE 01
4B FC 2D 42 97 66 F1 F9 7E A2 89 87 9D 35 02 F5 B8 88 7E 48 E7 CE 6A 91 1C BB F6 86 AF 3B DE 7F
CC 85 F3 E5 30 5C 7B 76 1E 42 33 5A 7A 15 E3 CD DD 21 61 3A 84 91 A7 80 8F F1 52 DF 7C A7 55 8E
09 BD 2F 0C E8 C0 D3 77 63 A1 9F B6 AD D6 CA C7 37 4C 05 68 24 7F D0 CF C6 CE C3 A6 80 9F 22 66
18 CB E9 0A 4A 75 CF C0 D5 E3 B9 CB 59 1E 56 F2 5C B4 C9 F9 67 95 34 69 B0 6E B0 5B AC 80 37 3B
2B 10 F8 BC 5F BB 0D B4 2D 68 41 7E DB 2E 0C 90 EE 92 CB 32 38 45 A7 A7 B6 06 4C F4 BA 98 B7 54
FF 57 54 9F FB F2 F2 26 7C 6F 3E 54 F8 53 F4 7A 34 45 5E B7 AD EE BE A5 A0 2F 01 A2 81 09 9D F2
FC 47 47 FF 57 5A D3 D5 A7 FD 18 64 0E B9 88 2F 4F 77 41 9F 28 C3 8E F0 33 F4 4E AE F6 F9 95 A7
D4 96 69 70 3B 68 D7 B3 F7 AE 32 EE F2 26 A7 88 0F 48 ED BE E9 0F 39 14 2E CD 74 F4 22 2D E7 2A
0E 82 E1 E4 20 79 61 9F D7 DC 03 A1 85 84 8F 55 12 C1 B5 F9 3A 63 15 7E 7B E0 8B 95 D5 EC 09 FA
D5 39 46 E2 25 FE A4 36 88 B6 7A 1A F6 B0 38 D8 C2 DB C3 DA 9E B1 1A 68 54 94 D2 AD C6 B9 36 39
E2 D0 3C 71 A7 69 84 FD 7B 5A CF FE 7A F3 FE 01 E5 BE C4 A2 22 6F 91 6E 2E F3 E8 C4 12 46 35 71
F5 EF 2D AA 29 07 96 C7 17 29 C1 39 19 13 AC 6D 92 09 62 8E F9 86 C6 CD D2 E8 85 74 00 7A 6E 28
41 51 E1 CF 52 7E F3 01 FD EA EF FD CD B7 83 A7 D1 58 41 7A D3 70 6C 55 B7 B3 07 D9 1D 80 8C 50
5B CF 4D D6 CA BD FF 1F 3E A3 EE 0B 5D FB F6 B6 E0 A6 C9 BC 05 42 7C 5E 84 1C A1 50 79 A6 BB 4F
B5 B9 4A 1E DD 76 77 E2 11 2A 12 0E 84 9B 96 9D A1 09 B2 DD DC 63 20 78 D6 27 BF DF A8 00 30 CA
4A 26 AC 70 29 D0 94 D7 BD B8 0B D0 BF 77 8F 8B D5 DC C1 FD B2 B1 C6 6F A4 E7 21 BE 09 DB 07 24
FF C7 97 8F 2D B6 88 C1 0E C1 F0 BF C9 AA 86 64 42 92 8D 7A 73 22 65 50 66 BD F0 CE 30 66 2B 22
6D 90 A3 6B B0 DF DF 14 34 B3 11 98 C1 5B BE F6 F9 82 4F 12 F4 23 01 4C C0 9B A6 EF B5 EB C9 5F
39 AA CE 5B B0 35 34 13 71 A8 FD 1F 1C 98 68 24 E2 BF 0D 21 43 16 52 93 47 B5 E9 CC 3E 8A 44 89
33 BF 3C 19 A1 9A 1F EA 36 32 28 75 EB 7B 63 9D A4 BD 12 38 36 05 DD 2A 4C 5C 7D B5 5D 0D 4D 7D
12 D0 00 76 F3 EC BC A9 16 B7 06 D1 55 96 34 FB 3C C7 6D 2A 42 AF 8F 30 70 12 0A 43 4D 83 A2 6C
73 A4 54 3D E0 03 D8 68 9B 33 EB 9E 70 ED 2B 6A AE 1E 5B 1F 1A 23 0F C6 38 56 50 77 B5 A3 EE FD
95 CA 87 D4 B0 4C E1 41 94 06 D0 8C 3D 8B BC B1 82 03 2D CD F1 98 CF 9D 91 CA 57 C4 B2 81 CD BB
AC 9F 2C A9 1C 83 13 E9 CA 34 46 D0 14 CC 0C 4A EE ED 90 9B D9 BC FC 33 E9 C7 17 AC ED FE BB 1C
15 F2 2F 3F AF 79 79 65 91 F4 43 EE FB 3D 71 22 BF FE C5 13 BB DA 10 E3 96 71 FF 35 AF 4F 10 E1
18 A3 16 4A B4 42 72 67 FD FD F4 03 2D 03 D3 C8 BC FB 3D A2 25 B3 F3 18 3C 46 A0 E8 C5 B2 41 E1
C5 3E AB 9C AA D7 6A E8 1C 9E BA C0 18 A3 95 74 F7 64 D0 0C 28 5A EB 80 74 D4 15 5F 2E 6D 2D BC
8A 43 1B AE 22 9F F1 0D 61 71 BC 9B 0F E0 62 01 7E FB 1E 4A 10 DF 76 FB F8 F1 B4 9D D9 57 3F 18
BF 77 6C 5B 03 78 82 39 7C 8E D2 94 15 30 8E 11 85 60 58 54 E3 87 C9 1E B0 C5 B0 27 AA BB B9 88
70 C5 60 EE 33 9D BF EA DD 77 13 AC 51 01 B6 6B 3B 8F 6A 6D 0B 58 EE 77 C4 06 2D B5 28 0D 4B C2
70 28 01 80 3B FA B8 AE C3 0E 97 CA 62 B8 81 2E 20 01 29 58 E6 39 A1 80 8E 9F 56 CE B0 CA 0B B1
0D 9A A2 99 3E 90 F7 8F 81 07 C0 E9 B3 09 36 31 5F AA 6E B1 15 B6 B6 79 33 AD 43 21 BA DE A4 2F
8D BD F9 83 7F 11 47 30 B5 51 C8 47 89 77 24 DC 11 2B F8 05 E4 18 F7 43 88 55 BF 6F 4E 6C 34 29
91 C4 14 6D AF FA 9B 9E 56 B3 D1 B2 7A 9E 00 4D 88 CE EB 5C 79 A9 E5 01 89 64 AD 48 4E E2 1D 89
32 4B B2 81 B5 80 D1 9D 50 E2 36 10 B5 50 A3 12 DA 45 5B 56 73 B6 8A 02 BD 8D 5A 19 68 0D 93 F6
A3 9D 99 77 BC 27 7C 20 1A 8B A3 E9 38 44 D1 6E CD 47 C7 D9 D1 85 D5 8F 7A DE 6F F8 2C C4 54 DC
D2 BF 42 96 56 5B AB A0 03 32 59 45 4D A2 81 59 5C C7 69 E6 8E 2F 5E 20 19 15 F5 37 F9 1C 14 FE
21 A1 A2 62 4E B3 00 BF 03 67 2B AB 6E AA 54 00 6F FB 17 D2 F2 EC 89 D3 13 E4 0E D6 43 F7 BD 61
09 16 EF AB FC CF 55 DE 63 B1 AC 5F B7 C2 F8 05 C3 14 E4 91 7A 07 F7 40 32 16 CF 23 10 D3 AB A6
77 A6 E9 F6 E1 57 0E DA 54 E7 F1 5E 12 A4 08 BA B4 3F 1E E6 43 80 47 A4 C5 F9 21 B4 15 62 B8 19
B9 AC 54 3C 82 28 4C 2F 45 57 B4 A3 B9 2A 68 C3 30 B4 0E B2 32 10 59 41 34 97 9C C3 D4 03 6D 2C
3A 26 63 3B 51 A7 0E F6 75 97 52 A3 64 C2 27 2A 0E 40 46 57 6E ED 42 0D E6 21 8B CB 0B 1F F8 FD
B0 4F B2 A8 4C 25 CF 2B 31 5B EB FE BC 2C AB E3 46 C4 AE EB F0 3F 59 41 75 1D A3 E5 D0 DA AA CA
26 03 BD 36 C1 41 44 1F 18 3D 6A F0 86 EF 58 74 6E 0F D6 C6 47 4C 6A 08 EC 9B EF 72 0A AB 59 AA
F2 24 13 0E 30 2E B5 12 85 21 84 27 C9 E8 E2 08 93 52 28 14 B6 64 EE 24 46 97 F6 46 26 F8 89 2D
40 49 22 87 AD 71 AF A5 AE F4 CF A4 40 B0 7C CD F1 02 08 58 96 81 42 D9 4D 40 49 25 BF 80 1C 3D
FA 63 AF FF E5 33 1E 75 84 0A F8 16 79 2F DF BB EE 93 56 80 05 84 7E E4 49 3D C0 C3 EE D8 04 59
49 B0 D7 73 31 F3 83 88 6A 99 9A 6D 72 3E FB 2E C3 E2 E0 4E 27 5B FC EE C9 CC 06 D8 28 FA 3B 98
D4 1D DB DB 78 D4 41 4C 61 B3 5D 9C 23 B4 9E F9 3C 7F 87 92 A5 B3 AE 96 FE 3E BD 95 BC 93 AC 54
F1 ED 46 84 39 17 40 8B DA D5 1A AA 5C A3 47 6B 63 91 27 EB 4C DE 3D 90 92 E3 F9 B3 C8 2C 38 85
76 C2 98 8E FC 2D 9D B2 72 25 DD FB 67 65 DE 9D 02 60 E7 8A CF 3F 7C FD 53 85 2C F7 1D A3 A4 68
CD 98 BA 34 3D 56 40 50 BA C8 EC F5 5F F4 B9 5D A5 E9 B1 8A 3A DC 0E 9F 57 40 1F 8C 57 B5 58 4B
DF 67 5F D3 72 A2 04 0E 6B 1A 56 E1 74 8C 7E F6 BA 69 8F 2A 65 8B 46 29 96 ED 72 53 63 D3 EF 35
FE 83 07 01 C6 DB DE 3F AE CE 27 B9 97 45 C9 FE CE 29 13 C0 A6 EA 8C 65 D7 C3 44 F9 24 19 96 37
A0 15 A0 4C 97 B9 CF 1B 5E EF 0B 5C A2 43 48 E4 41 B6 6A E3 F6 3F 76 59 45 6F 29 07 18 5C 9B 3C
49 B4 5D 04 8E 5B F8 BF 72 B5 FF 3F 45 17 E4 A7 44 53 83 C4 6B 11 1A E1 C2 25 EF D8 38 54 4A 8D
BA 3C BC 5D F7 65 97 4C BB B7 0B AA D1 62 AA 6D 76 57 61 2C 3B E0 D0 5E 23 5D 4C 12 13 24 20 6E
FC 24 06 B1 9B 8A F6 FD 2A 10 75 D6 59 C9 3E 4E 0A 5F 47 7E 69 47 ED 99 03 58 1A 5A D2 B4 1A 1B
3D 03 A3 1B 25 74 B1 81 4E 45 17 A2 B4 79 3D 0E 26 96 39 E6 94 E3 77 54 D1 13 81 A3 2C F5 F8 F5
EF 88 51 E6 40 BE E4 FD 90 6A 0E 22 41 F3 44 9F FC A8 92 C5 48 1A 92 1B 73 86 6B 1F 19 88 C8 C1
F1 91 83 C8 4A 56 B7 82 0E AD AC 04 B8 BF 66 62 0F 6B C4 43 0D 4B 40 64 6B 42 42 9E B6 36 A2 3D
08 A7 26 C5 FF 82 48 0B 83 30 06 89 7C 75 67 58 EB 12 47 25 71 91 23 D6 CB C8 C3 F3 F3 2F 1B 06
9F 04 5A DF 28 9D 91 E6 6F 53 BE DF B5 46 14 E7 5C F6 04 B8 4C 3A 8A 50 89 2D A8 51 51 1E 84 CF
5F A3 30 7D 8B F6 EC 57 DF FB C9 4A D7 70 74 98 D4 35 B0 FC A3 A7 EC AF DC 90 16 5B 9D 11 29 66
F5 CA EB C6 81 33 0C 62 9A 12 63 18 FB 46 F2 9F C2 DC 16 FF 51 5E 3C 1A DC B0 E5 2C 10 9E 8E 2D
5C FC 41 A8 F3 6C A6 EA 38 BA 85 7E 33 D7 BB F8 C5 05 61 3C A6 90 E6 FD B4 D5 80 D7 CD A2 50 24
5D 90 62 35 81 2E 6A 94 0B 39 5E C8 06 84 7E 66 F5 9F DE AF 09 1F 9C A4 7B 50 6A 65 51 AD 4E 83
7D 5F D7 B3 D3 B4 C8 BA 46 31 72 DA 58 2E 38 7A 2F 66 5D 8C 01 A8 0F 3B 17 C4 F3 87 3E 55 FC 43
65 8A 74 D7 E9 C1 C2 91 4B 59 DA F5 09 E7 60 93 05 19 20 77 4D 7A BB E0 2D E0 EC 55 5F 61 69 63
F1 91 D1 54 2C A2 CA 22 7C 04 8A 5E DB B1 5A F5 2B 41 69 7A 68 E8 B1 41 4C 76 1B 48 56 66 89 1E
26 3F E0 A3 9E 31 83 04 F1 D7 2B 19 AF E9 53 41 CF 4E 91 92 F5 DD 81 CC A9 AF 52 90 94 B0 98 C3
CB C6 4A 68 9C 9F 73 B7 AE 09 98 7D B3 84 77 61 DD DA B7 62 AA 4A F1 32 6A 53 27 85 4F 85 C5 A2
5D 2E 85 31 23 4B 20 60 56 15 43 49 B7 DC 3B BD E4 43 4A AD B4 ED B5 BB 63 D5 35 13 CC 68 EA 8C
27 60 65 47 1C 0F 90 08 A3 A8 14 A8 DE 90 38 2A EB 66 31 35 9C F6 78 08 38 D0 24 FB 7F E0 96 A8
51 FB 1B EB 5A E3 B3 42 EC D6 7A 27 A0 2F CC A8 6B 51 91 73 CD 71 DB D1 86 48 BD 23 06 BD D0 35
38 6F D1 F2 2C 17 0F 84 C9 48 4F 1C CD 18 4B 67 70 E0 FF 39 35 6B 0F B1 79 82 37 05 D5 F3 1E B8
6F A9 70 23 47 42 7E 4B 1B BB C8 67 46 B5 73 7E B0 51 24 E0 6F 8B 83 A7 8E 3B E1 6A 21 2D F3 04
47 60 D6 AF BD 7B 64 5E 85 C5 B2 FF C5 E9 D7 8F FF F2 7C E3 B9 D6 F3 AD D1 8F F8 51 82 94 2B 3D
3A 5F 80 56 92 61 08 64 0E 03 19 44 7F 68 52 81 F4 E1 2E A1 DE 84 9A 6B C4 50 AD 08 56 70 52 F0
05 48 43 57 D8 F8 8C 45 62 3E 9A 74 B7 58 6B 09 60 5C F9 7B C7 62 F7 2A 61 24 47 F7 DB D8 C5 98
        %>;
		
		address_list = []; address_list[127] = void;

		for(var i = 0; i < 4096; i += 4) {
		    EncryptionControlBlock.add(
                (tempBlock[i]) |
                (tempBlock[i+1] << 8) |
                (tempBlock[i+2] << 16) |
                (tempBlock[i+3] << 24)
                );
		}
	}
    
    var xcode_seed;
    function xcode_rand() {
        var seed = xcode_seed;
        xcode_seed = (1103515245 * seed + 12345) & 0xFFFFFFFF;
        //Debug.message("xcode_rand: " + xcode_seed);
        return (xcode_seed ^ (seed << 16) ^ (seed >> 16)) & 0xFFFFFFFF;
    }

    var xcode_op_mov_val = 0;
    var xcode_op_mov_reg = 1;
    var xcode_op_not = 2;
    var xcode_op_neg = 3;
    var xcode_op_inc = 4;
    var xcode_op_dec = 5;
    var xcode_op_add_val = 6;
    var xcode_op_sub_val = 7;
    var xcode_op_xor_val = 8;
    var xcode_op_add_reg = 9;
    var xcode_op_sub_reg = 10;
    var xcode_op_push = 11;
    var xcode_op_pop = 12;
    var xcode_op_shr_reg = 13;
    var xcode_op_shl_reg = 14;
    var xcode_op_imul_reg = 15;
	var xcode_op_load_arg = 16;
    var xcode_op_interlace = 79;
    var xcode_op_table_ECB = 80;

    function xcode_push(xcode, n, inst)
    {
        xcode[0] += n;
        if(xcode[0] > 128) return false;
        xcode.add(inst);
        return true;
    }

    function xcode_building_first_stage(xcode)
    {
        switch (xcode_rand() % 3) {
            case 1
               :// MOV ESI, EncryptionControlBlock : BE
                // MOV EAX, DWORD PTR DS:[ESI+((xcode_rand() & 0x3ff) << 2)]
                xcode[0] += 7;
                if(xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_mov_val, EncryptionControlBlock[xcode_rand() & 0x3ff]]))
                    return false;
                break;
            case 0
               :// MOV EAX, xcode_rand() : B8
                if(++xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_mov_val, xcode_rand()]))
                    return false;
                break;
            case 2
               :// MOV EAX, EDI : C7 8B
                if(!xcode_push(xcode, 2, [xcode_op_load_arg]))
                    return false;
                break;
        }
        return true;
    }

    function xcode_building_stage0(xcode, stage)
    {
        //Debug.message("xcode_building_stage0: " + stage);
        if (stage-- == 1)
            return xcode_building_first_stage(xcode);

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        switch (xcode_rand() & 7) {
            case 0
               :// NOT EAX :D0 F7
                if(!xcode_push(xcode, 2, [xcode_op_not]))
                    return false;
                break;
            case 1
               :// NEG EAX : D8 F7
                if(!xcode_push(xcode, 2, [xcode_op_neg]))
                    return false;
                break;
            case 2
               :// INC EAX : 40
                if(!xcode_push(xcode, 1, [xcode_op_inc]))
                    return false;
                break;
            case 4
               :// DEC EAX :48
                if(!xcode_push(xcode, 1, [xcode_op_dec]))
                    return false;
                break;
            case 3
               :// PUSH EBX : 53
                // MOV EBX, EAX
                // AND EBX, AAAAAAAA
                // AND EAX, 55555555
                // SHR EBX, 1
                // SHL EAX, 1
                // OR EAX, EBX
                // POP EBX
                if(!xcode_push(xcode, 21, [xcode_op_interlace]))
                    return false;
                break;
            case 5
               :// XOR EAX, xcode_rand() : 35
                if(++xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_xor_val, xcode_rand()]))
                    return false;
                break;
            case 7
               :if ( xcode_rand() & 1) {
					if(++xcode[0] > 128) return false;
                    // ADD EAX, xcode_rand()
                    if(!xcode_push(xcode, 4, [xcode_op_add_val, xcode_rand()]))
                        return false;
                } else {
					if(++xcode[0] > 128) return false;
                    // SUB EAX, xcode_rand()
                    if(!xcode_push(xcode, 4, [xcode_op_sub_val, xcode_rand()]))
                        return false;
                }
                break;
            case 6
               :// MOV ESI, EncryptionControlBlock : BE
                // AND EAX, 3FFh
                // MOV EAX, DWORD PTR DS:[ESI+EAX*4]
                if(!xcode_push(xcode, 1+4+1+4+3, [xcode_op_table_ECB]))
                    return false;
                break;
        }
        return true;
    }

    function xcode_building_stage1(xcode, stage)
    {
        //Debug.message("xcode_building_stage1: " + stage);
        if (stage-- == 1)
            return xcode_building_first_stage(xcode);
        
        // PUSH EBX
        if(!xcode_push(xcode, 1, [xcode_op_push])) return false;

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        // MOV EBX, EAX
        if(!xcode_push(xcode, 2, [xcode_op_mov_reg]))
            return false;

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        switch (xcode_rand() % 6) {
            case 4
               :// ADD EAX, EBX  : D8 01
                if(!xcode_push(xcode, 2, [xcode_op_add_reg]))
                    return false;
                break;
            case 0
               :// SUB EAX, EBX : D8 29
                if(!xcode_push(xcode, 2, [xcode_op_sub_reg]))
                    return false;
                break;
            case 3
               :// NEG EAX, ADD EAX, EBX : D8 F7
                if(!xcode_push(xcode, 2, [xcode_op_neg]) ||
                   !xcode_push(xcode, 2, [xcode_op_add_reg]))
                    return false;
                break;
            case 1
               :// IMUL EAX, EBX : C3 AF 0F
                if(!xcode_push(xcode, 3, [xcode_op_imul_reg]))
                    return false;
                break;
            case 2
               :// PUSH ECX : 51
                // MOV ECX, EBX
                // AND ECX, 0F
                // SHL EAX, CL : E0 D3
                // POP ECX
                if(!xcode_push(xcode, 1+2+3+2+1, [xcode_op_shl_reg]))
                    return false;
                break;
            case 5
               :// PUSH ECX : 51
                // MOV ECX, EBX
                // AND ECX, 0F
                // SHR EAX, CL : E8 D3
                // POP ECX
                if(!xcode_push(xcode, 1+2+3+2+1, [xcode_op_shr_reg]))
                    return false;
                break;
        }
        // POP EBX
        if(!xcode_push(xcode, 1, [xcode_op_pop]))
            return false;
        return true;
    }

    function xcode_building(seed)
    {
        xcode_seed = seed;
        var xcode;
        for (var stage = 5; stage > 0; --stage) {
            xcode = [5 + 4]; // xcode limit = 128
            if(xcode_building_stage1(xcode, stage) && xcode[0] + 5 + 1 <= 128)
                break;
        }
		// compile function
		var funcstr = [
			"function(arg) {",
			"var v,v2,st=[];"
		];
		for (var i = 1; i < xcode.count; ++i) {
            var inst = xcode[i];
			switch(inst[0]) { // op
                case 0://xcode_op_mov_val:
                    funcstr.add("v=" + inst[1] + ";");
                    break;
				case 16://xcode_op_load_arg:
					funcstr.add("v=arg;");
					break;
                case 1://xcode_op_mov_reg:
					funcstr.add("v2=v;");
                    break;
                case 2://xcode_op_not:
					funcstr.add("v^=0xFFFFFFFF;");
                    break;
                case 3://xcode_op_neg:
					funcstr.add("v=-v;v&=0xFFFFFFFF;");
                    break;
                case 4://xcode_op_inc:
					funcstr.add("++v;v&=0xFFFFFFFF;");
                    break;
                case 5://xcode_op_dec:
					funcstr.add("--v;v&=0xFFFFFFFF;");
                    break;
                case 6://xcode_op_add_val:
					funcstr.add("v+=" + inst[1] + ";v&=0xFFFFFFFF;");
                    break;
                case 7://xcode_op_sub_val:
					funcstr.add("v-=" + inst[1] + ";v&=0xFFFFFFFF;");
                    break;
                case 8://xcode_op_xor_val:
					funcstr.add("v^=" + inst[1] + ";");
                    break;
                case 9://xcode_op_add_reg:
					funcstr.add("v+=v2;v&=0xFFFFFFFF;");
                    break;
                case 10://xcode_op_sub_reg:
					funcstr.add("v-=v2;v&=0xFFFFFFFF;");
                    break;
                case 11://xcode_op_push:
					funcstr.add("st.add(v2);");
                    break;
                case 12://xcode_op_pop:
					funcstr.add("v2=st.pop();");
                    break;
                case 13://xcode_op_shr_reg:
					funcstr.add("v>>=v2&0xF;");
                    break;
                case 14://xcode_op_shl_reg:
					funcstr.add("v<<=v2&0xF;v&=0xFFFFFFFF;");
                    break;
                case 15://xcode_op_imul_reg:
					funcstr.add("v*=v2;v&=0xFFFFFFFF;");
                    break;
                case 80://xcode_op_table_ECB:
					funcstr.add("v=EncryptionControlBlock[v&0x3FF];");
                    break;
                case 79://xcode_op_interlace:
                    // PUSH EBX
                    // MOV EBX, EAX
                    // AND EBX, AAAAAAAA
                    // AND EAX, 55555555
                    // SHR EBX, 1
                    // SHL EAX, 1
                    // OR EAX, EBX
                    // POP EBX
					funcstr.add("v = ((v & 0xAAAAAAAA) >> 1) | ((v & 0x55555555) << 1);");
                    break;
            }
		}
		funcstr.add("return v&0xFFFFFFFF;}");
        return funcstr.join("\n")! incontextof this;
    }

    function cxdec_execute_xcode(hash)
    {
        var index = hash & 0x7f;
        hash = hash >> 7;	

        if (!address_list[index]) {
            address_list[index] = xcode_building(index);
        }
        return [address_list[index](hash), address_list[index](hash^0xFFFFFFFF)];
    }

    function __cxdec_decode(hash, offset, buf, len)
    {
        var ret = cxdec_execute_xcode(hash);

        var key_8 = (ret[0] >> 8) & 0xFF;
        var key_9 = (ret[0] >> 16) & 0xFF;
        var key_10 = ret[0] & 0xFF;
        var key1 = ret[1] >> 16;
        var key2 = ret[1] & 0xffff;

        if (key1 == key2)
            ++key2;
	
        if (!key_10)
            key_10 = 1;

        if ((key2 >= offset) && (key2 < offset + len))
            buf[key2 - offset] ^= key_9;
	
        if ((key1 >= offset) && (key1 < offset + len))
            buf[key1 - offset] ^= key_8;

        buf.xor(0, len, key_10);
    }

    function cxdec_decode(hash, offset, buf, len)
    {
        var bondary = (hash & 0x28C) + 0x694;
        var dec_len;
        if (offset < bondary) {
            if (offset + len > bondary)
                dec_len = bondary - offset;
            else
                dec_len = len;
            __cxdec_decode(hash, offset, buf, dec_len);
            offset += dec_len;
            buf.ptr += dec_len;
            dec_len = len - dec_len;
        } else
            dec_len = len;

        if (dec_len)
            __cxdec_decode((hash >> 16) ^ hash, offset, buf, dec_len);
    }
}

Storages.setXP3ArchiveExtractionFilter((new cxdec()).cxdec_decode);