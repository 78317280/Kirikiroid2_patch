<html>
  <head>
    <meta charset="utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>
  
    <title>Patch List</title>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">

    <!-- Optional theme -->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
  
    <script type="text/javascript" src="https://stuk.github.io/jszip/dist/jszip.js"></script>
    <script type="text/javascript" src="https://stuk.github.io/jszip-utils/dist/jszip-utils.js"></script>
    <script type="text/javascript" src="https://stuk.github.io/jszip/vendor/FileSaver.js"></script>
    <!--script type="text/javascript" src="../js/downloader.js"></script-->
<style>
form{margin-bottom: 0em;}
th{padding: 0.3em; text-align: center;}
td{padding: 0.3em;}
td.datetime{text-align: center;}
</style> 
  </head>
  
  <body>

<table id="table_all" border="3" style="left: 50%; position: relative; transform: translate(-50%, 0%);">
<tr>
	<td colspan="4">
	Filter:<input style="width: 60%;" type="text" oninput="doFilterName(this.value)"/>
	<span id="title_count" style="right: 0px; position: absolute; margin: 3px;">Titles</span>
	</td>
</tr>
<tr>
	<th>&nbsp;</th>
	<th>Update Time&nbsp;<button onclick="sortTableByTime(true)">▲</button><button onclick="sortTableByTime(false)">▼</button></th>
	<th>Brand</th>
	<th>Title&nbsp;<button onclick="sortTableByName(true)">▲</button><button onclick="sortTableByName(false)">▼</button></th>
</tr>
</table>
<script type="text/javascript" src="alldata.js"></script>
<script>
var filter_data;
function DoGet(name, filelst) {
/*
	if (filelst.length == 0) {
		window.open(name, "_blank");
		return;
	}
*/

    var Promise = window.Promise;
    if (!Promise) {
        Promise = JSZip.external.Promise;
    }
	
    /**
     * Fetch the content and return the associated promise.
     * @param {String} url the url of the content to fetch.
     * @return {Promise} the promise containing the data.
     */
    function urlToPromise(url) {
        return new Promise(function(resolve, reject) {
            JSZipUtils.getBinaryContent(url, function (err, data) {
                if(err) {
                    reject(err);
                } else {
                    resolve(data);
                }
            });
        });
    }
	
	var zip = new JSZip();
	for(var i = 0; i < filelst.length; ++i) {
		var filename = filelst[i];
		var url = filename;
		filename = filename.replace(/.*\//g, "");
		zip.file(filename, urlToPromise(url), {binary:true});
	}

	// when everything has been downloaded, we can trigger the dl
	zip.generateAsync({type:"blob"})
	.then(function callback(blob) {
		// see FileSaver.js
		saveAs(blob, name + ".zip");
	}, function (e) {
		alert(e);
	});

	return false;
}

function MakeTable(data) {
	var title_count = document.getElementById("title_count");
	title_count.removeChild(title_count.firstChild);
	title_count.appendChild(document.createTextNode("" + data.length + "/" + all_data.length + " Titles"));
	var table = document.getElementById("table_all");
	
	// keep title only
    rows = table.getElementsByTagName("tr");
	var count = table.rows.length;
	while(--count > 1) table.deleteRow(count); 
	
	var date = new Date();
	for(var i = 0; i < data.length; ++i) {
		var line = data[i];
		var filelst = line[4];
		var id = line[2];
		var tr = document.createElement('tr');
		
		// GET
		var td = document.createElement('td');
		var form = document.createElement('form');
		var btn = document.createElement('button');
		btn.className = "btn btn-primary";
		var text;
		if(filelst.length == 0) {
			text = "VIEW";
		} else {
			text = 'GET'
		}
		btn.appendChild(document.createTextNode(text));
		btn.onclick = function(arg1, arg2){
			return function(){DoGet(arg1, arg2); };
		}(id, filelst);
		btn.type = "button";
		form.appendChild(btn);
		td.appendChild(form);
		tr.appendChild(td);
		
		// time
		date.setTime(line[0] * 1000);
		td = document.createElement('td');
		td.className = "datetime";
		td.appendChild(document.createTextNode(date.toLocaleString()));
		tr.appendChild(td);

		// brand
		td = document.createElement('td');
		td.className = "datetime";
		td.appendChild(document.createTextNode(line[1]));
		tr.appendChild(td);
		
		// name
		td = document.createElement('td');
		td.appendChild(document.createTextNode(line[3]));
		tr.appendChild(td);

		table.appendChild(tr);
	}
};
function doFilterName(pattern) {
	if (pattern.length) {
		filter_data = [];
		for(var i = 0; i < all_data.length; ++i) {
			var text = all_data[i];
			if (text[3].indexOf(pattern) != -1 || text[1].indexOf(pattern) != -1) {
				filter_data.push(text);
			}
		}
	} else {
		filter_data = all_data;
	}
	MakeTable(filter_data);
}
doFilterName("");

function sortTableByTime(newer) {
	if (newer) filter_data.sort(function(a,b){
		if (a[0] > b[0]) return 1;
		if (a[0] < b[0]) return -1;
		return 0;
	});
	else filter_data.sort(function(a,b){
		if (a[0] > b[0]) return -1;
		if (a[0] < b[0]) return 1;
		return 0;
	});
	MakeTable(filter_data);
}

function sortTableByName(reverse) {
	if (reverse) filter_data.sort(function(a,b){
		return a[2].localeCompare(b[2]);
	});
	else filter_data.sort(function(a,b){
		return b[2].localeCompare(a[2]);
	})
	MakeTable(filter_data);
}
</script>

  </body>
</html>