@set(_DEBUG=0)

class cxdec
{
    var EncryptionControlBlock;
	var address_list;
	
	function cxdec() {
	    EncryptionControlBlock = [];
        var tempBlock = <%
F5 11 2B D9 71 B3 5E 01 26 E9 F9 3D C2 1F CB C7 74 5C 83 36 63 8C E5 15 EE 60 5F A7 C0 27 29 79
93 07 F2 27 5B 33 E3 6E 79 55 2E 30 3A 82 6D 29 D3 E1 97 4E 15 0A C9 62 4F F0 E1 A0 73 6B 67 F3
8C EA 90 6A E7 20 2B 0F 01 E9 0A 7A 71 77 5D BD 04 4B F1 59 6B 04 11 DC 6C 76 20 1B 18 1C D3 21
7A 14 B4 46 42 5A 69 DB F0 13 77 4D C5 3C A6 B0 56 68 EF 1D 9F 58 46 5A 60 51 C3 3D AE 42 EA 41
39 3C D7 FD 64 08 8F 08 02 7A 95 09 F6 17 B3 32 38 EC 98 82 33 5B 08 FD 75 1D DD 70 AC AE 6A 1C
8C 8D 76 5D DA 21 C3 7E FB BB 04 88 BD C6 66 0A 45 26 23 81 61 46 28 20 87 FA E3 6A 02 4B 4C 0E
30 8F 53 5E A8 0D 06 30 D8 2C 7D 89 24 0A 44 03 51 8C 06 EE CE 47 C9 DB 15 55 4B AE 91 C2 8C 4A
7C 0D 36 75 2B 6A F3 BF D6 E3 BF 30 FE 8D 41 D7 1D 94 13 40 1A F1 AD 61 9A 54 45 8C FA 3E 70 0B
DA 70 3B 73 D5 91 7B 98 F6 A5 92 0A BB 02 93 FE C1 C6 CE 7B FB 4A B2 15 97 9E D6 FD 42 A7 B8 2D
C5 5B C7 75 6E 9C 03 05 6B E7 2D 54 27 A7 07 7F BB 8E 98 47 FB B5 CE 87 38 75 5A 95 31 95 64 FD
F2 E9 C4 F6 17 05 09 1C A8 F7 A6 63 5C 62 D5 70 D5 BB 89 A6 8E B8 E4 83 18 37 B9 8E 29 BE 1D 8A
04 EA 71 AD 37 D4 97 27 75 ED C5 85 16 8B DB 97 C2 9D 26 83 6D 9A 32 DF 69 B0 33 28 51 B4 ED 12
B7 4F 87 39 90 21 FD 1C 19 E6 2D AB B2 74 66 9A C9 2C 2C 5F D5 68 73 E5 E3 F3 EA 0A C9 9D 62 22
E7 1D A3 C8 E4 EF F2 3E 21 BA DB 49 5F 43 87 58 78 6A AC 0D B3 0E 80 DF E0 25 9B 04 1F 5C 47 08
66 3D 56 87 9B 0D 20 07 61 01 B5 CA 58 65 BF C6 79 95 0D 81 C9 E5 04 E7 A6 73 02 F7 8B 14 BB 72
C7 BB 16 AB 57 1B 91 37 77 4F C8 8F 8A DC 56 D1 B8 5A 50 57 08 77 3F 0F 51 F2 AE 0E 99 25 D6 E9
DF 75 2B 72 AC 05 98 9A E9 E8 8B 23 56 A8 F4 3C DD 9C BF 9A DF D0 90 C4 A1 83 17 D7 52 A7 AF 03
46 6F 79 E2 7B 2F 31 4F 83 8F CF E3 69 07 4F E5 45 38 37 46 CE 7F 74 65 25 AE BC 89 42 07 FB 4D
90 57 BF 6B 09 5E 53 D6 CD 05 98 04 39 9D DF AF 5A A3 28 33 E3 83 55 0D B1 C1 54 88 39 FE 28 1D
36 9C D4 A6 F4 25 60 C2 F4 F1 81 2A 9B 91 CA 0F E0 76 8D 21 29 E6 01 3D EF 2A F6 EB 26 E2 BC 1A
E0 6B FC EA 66 A2 88 A1 AE EC A9 66 C0 0C DE D5 E6 96 D1 67 1D 3E 05 A8 B2 68 A1 00 72 E2 62 E4
61 9C 9A D1 D5 04 BE 75 2F 53 AF D6 FB 74 9D 00 E9 46 6F 52 6C CB AD D7 B8 F7 CC C9 6F 8C 40 9C
98 67 6D B8 B5 66 91 41 BF 79 1B 89 41 C9 D3 1B EB 17 85 C6 1A BB 5D 44 EB A4 A2 DC 08 E2 07 40
41 6E 53 BE 10 41 61 C1 9D 6F 17 A0 3B 17 75 8F D2 50 4C 92 FE 53 5D 28 22 42 86 2F DC 7F C9 9B
DB E7 35 D9 6A 48 0B 92 9F 83 C5 B2 C0 6B CD A1 B3 4A C4 05 EC D8 BF C3 D7 71 5B 4E B3 BE 38 1E
46 A1 87 B4 B6 83 B4 02 21 83 74 37 7C E6 C6 4C E9 F2 15 BF BE 71 4F 81 09 5A 80 E8 B8 C3 CF 68
9F 91 A5 75 B0 9B A5 D9 E3 D7 7F 03 87 29 A8 92 27 89 95 E6 4F 37 11 D1 62 B9 1E EA 41 0D 22 5A
01 E1 67 E4 38 62 A5 91 B2 65 6A 13 67 BA 9E 28 4A 7B AA 98 F3 D8 EC 2D 4B 53 3D A9 36 FC B2 93
01 81 E5 B9 32 EA 60 A1 9B D7 C5 90 3A B7 08 FE 10 20 32 61 B2 03 4C 77 55 17 90 34 29 7E DA 9F
81 4A BB 5D 67 0D CE FD F6 5C 53 D2 38 44 23 15 38 59 0C 55 E4 49 46 32 B9 1B 8F ED AE A5 61 CE
F3 01 4A 77 CD 12 66 BC B9 9D 1A 8F 86 59 83 EA 51 15 3F 21 9A 33 28 B9 B1 95 42 8C E7 E8 73 D2
DA 3C 60 D8 F1 1F 49 94 2E 79 AE 2F E4 5F 30 85 6F C7 D3 01 15 6E A9 BB 45 46 7D E6 14 B2 8A A9
AC 0F 57 70 A2 A1 7F 45 A3 9F CD F9 9E 9B 8C 48 48 B6 C4 6B A7 93 4F 6F 98 E6 96 0D 9D 48 41 6F
F3 4F 4D 2B B1 0E A5 C9 29 C2 95 55 B5 EB 7A AD F9 52 2B 37 53 51 24 42 60 91 42 80 AD D7 73 3D
8C 0C C5 95 32 B7 76 5E 30 33 4F 3C 4E 90 AE 9D 0F 28 05 61 C6 C2 4D 0D DB AE EE DF 24 12 70 E1
8E E1 07 53 D4 2A 06 C6 42 E9 C2 8D C3 D0 B4 0F CE 25 CC 13 A4 04 82 A8 D1 6E C9 25 5E 6D E3 82
2D B1 D1 58 D0 35 5C CF 8D 51 38 71 F0 8A 57 32 53 53 AA 30 F4 DE 61 88 14 1B 73 EB 05 2A C4 86
18 51 53 A7 8E 00 D2 D0 D5 37 DD DB C0 50 A7 89 74 F6 1C 29 E7 DF AD 8E DF 82 8B DA A3 C2 26 70
68 1B EF 00 0F 46 20 8C D7 71 75 0C 46 62 71 E9 51 0A 8F 40 AB AC 7F AF 2D 70 C1 78 D7 87 00 9A
0F 69 71 86 D6 6F A8 7C 9F 56 5C 04 C9 CC 67 CD A6 4E 29 6C 1A 73 A8 2B 80 A8 48 6D E7 F4 A4 34
07 55 D2 A1 0D 42 A0 EE 34 24 DC 4F 14 67 47 6D 22 72 83 73 BF A1 6D C8 D8 DD 31 3B 39 B9 1F 04
0F 63 41 B2 E6 21 A2 05 2D 6B 34 D4 81 CC 5A 3C EC C1 5E 63 C3 77 3D 7A 4B D6 93 C7 74 CD 15 E1
55 70 CE 6C 78 C7 A2 DA 8B DD C6 DD 7D EF 14 1E 08 21 EE 49 86 40 2C 66 4E 42 F9 2E 4C EC 52 0D
AE 9C 5D DF 20 5C 51 F4 BE 56 56 5E AB 98 19 A6 DB 88 45 4F 4C 82 BD B6 4E DA 08 0B B1 E8 74 E9
DC 79 D2 2E 17 C3 FC C4 E2 58 C1 B5 77 55 95 20 95 EB 80 68 A9 29 8F AE F9 9A 7C 9E C1 84 18 C7
8D E4 93 7D 5F 75 AA 19 E1 66 C5 A3 81 80 52 FB AE 44 D0 79 F0 BB 65 7D 45 99 CB 34 CC A2 9E 2A
4F FB DD 81 CF BD E5 AE A4 D5 6E AC 23 15 1E D4 A6 C3 A6 EA A3 7D D3 A4 6C C5 0E 87 CB 8E C0 0A
18 DC DA 52 5C FD 48 12 D5 6E 3A D4 76 1D F7 A5 E7 A1 78 B7 26 C9 CC 44 55 54 DD 3F DE 65 46 01
59 60 95 A4 2F 89 F9 4A 2D 9D 31 B2 9A 01 11 29 F5 8E ED 02 54 F1 BB 29 68 39 51 DA 67 8B B8 C9
2C 5F 2A 99 CD 3A 4D 5E C4 17 BB A5 4E 73 ED 8A EE 5B 5E 6E 16 AC 90 89 EB 54 98 2E 18 D7 DD 83
7D FE F7 12 B5 71 4C 9F 5A F0 F6 44 31 0D 93 76 7D 8A 2B FD 79 E2 36 79 C1 95 82 B3 D2 0B 59 53
9C EA 39 3F 6D 5A F6 DD 91 E0 F2 E9 10 16 6C AC 77 79 56 60 BF 85 C7 9F 3D C8 B2 D1 66 5D FA 48
59 8B F8 36 1F 95 61 F3 CD CB 04 4D 72 5A CC AE 81 C0 4B AF CB 34 10 83 B7 F6 93 AB 5C 6B 87 F4
9B 62 BF 30 63 63 90 72 4F F2 E9 91 DA 26 F9 C4 F2 BC F5 C1 5C DF 11 D0 24 B6 B9 F8 58 5A 73 F0
BA EF E4 41 50 A4 14 2B C6 C9 29 15 91 98 E8 92 7D 43 E2 C5 56 71 93 8F AE EC 75 59 0A 64 34 9B
94 A1 10 AC D9 7C 69 B7 6E DA D0 7F 00 07 05 C4 DD C0 F0 F6 57 8F FC 14 0D 98 4E A5 F5 35 07 BE
22 0F BD 29 33 1A 71 45 41 A2 84 B8 8A 25 15 28 25 E6 53 8A 5A DD C7 AA EC D4 7C 07 17 A2 EA C5
C2 79 4D BD 6A 8F FE 91 AE 16 62 6D C2 14 83 D0 F7 5F 64 1F A3 E7 AB B9 29 30 18 37 D4 46 E1 3F
C8 58 2C 71 93 89 92 20 D9 BA 25 F3 D4 6A 37 38 91 10 86 27 06 5D 34 B8 AA F0 27 8A 76 F9 A4 C4
40 41 35 DC 1B B1 B7 59 BA 75 1F 7F 4D D0 70 2E 89 A0 72 1B 23 F1 DA 45 30 96 61 50 3F E6 27 2B
6C C4 06 0A 9F 22 AF AC D9 B5 52 09 D1 01 A4 7F 51 70 3E 86 D5 74 A6 5D 10 D9 FE 8B C0 D6 20 C5
B8 BF EE 9A 6A 35 6C EE CA 31 EF 4F 91 05 70 3B AA C1 22 7B 66 66 1A C5 64 59 E7 52 25 64 38 BA
E0 03 9D 54 90 C3 CE C8 37 2F B0 8C 66 59 1E 66 91 FA 45 A7 B4 B6 A2 12 4F 91 B2 61 AD E2 C8 30
7B B5 29 AB 45 8A 3D 08 D2 91 7D 47 FD 82 81 0A 08 60 BE C5 7A 72 E6 9B 3A 47 9D BE 12 D0 67 F7
A9 38 12 3D 84 B5 63 8E FD A0 D6 2C C1 07 E7 8E D7 6F 0D CC 4A 6E 16 FA 51 DE 79 96 7E 9C 60 C0
FA 59 1B 3C 94 6F 89 02 3F BE 1E DB 72 29 8E 60 5A 6B 6D E6 D6 46 8C 04 EC 30 53 BB 20 1F 79 97
32 E8 60 5C 25 E4 CD D6 98 65 9A 6A 6F 34 E8 4F B6 D8 C2 17 50 E0 46 5D 4A F8 65 0A 98 D4 DA A0
88 08 9B 76 76 D2 0E 8E A2 E3 63 47 CC 0C F5 8E B5 1E 3C 08 9F 54 E7 E8 8F 04 65 86 E1 41 F6 A6
68 8C 9B 3A 4F 42 B0 52 CC 16 12 3C E2 4A 24 BF 1B D5 B9 85 3C FA 02 CD 5F 89 67 74 C1 39 34 00
0A 11 B7 2C D4 F1 6E DB 80 B0 00 61 46 22 BD 29 C3 23 F6 15 0A EE 34 9A 4A 4A 96 8C 34 13 66 F2
97 77 A4 58 35 4F FB 00 98 76 23 81 D5 83 2F 28 73 23 6D EC 6D F1 BC 9C 81 13 A0 B3 F0 7A 2F 44
74 1C 79 33 35 BC AE 2D B4 A6 EA 2C 10 CB 18 73 57 70 11 3F AD 7C BF 43 30 B3 78 3E 16 7D 79 30
29 29 78 0E BF 12 C8 78 0D EC 90 AC 9E 75 0A 4F DC 0E 83 D1 BF C3 12 C5 2C 14 6F 53 9D B4 81 ED
22 A2 63 2C 5D 79 83 ED 7F 75 F8 B9 BD C6 40 C3 BF 9F 29 00 66 11 4C 2E DB 65 21 97 9C 2E 43 30
BF 26 17 E5 1E 3F 60 A4 EE DF D0 ED 83 9C F7 C3 B0 F1 84 27 DA 53 CD AA 8A EA 7A FA 61 A0 31 90
C9 CA 43 94 81 FB 8C 77 B5 CE 15 AC 77 49 A6 F2 E7 F7 F0 99 64 11 F1 5D 9B 03 89 3A 57 4A 15 E9
4F AD C4 72 2D 84 4A F9 9F A2 0A 27 D6 8C 90 81 0B 59 FC 92 5F BE 36 D6 4B 9C 76 A8 6F B8 9F 01
31 B6 4B 09 FD AC C3 AD 51 69 57 26 C5 FD 04 9B 3F F3 83 73 13 F0 FB 11 AB 0D 33 F4 4E 71 35 D5
FB 3A 09 DF ED 24 30 6D C7 01 25 A6 D7 63 28 41 56 0F 41 E5 BD 98 15 D8 90 FC EB 77 B5 3B 2B A0
48 23 EB 68 4A F1 5A 48 A2 D3 43 44 37 49 37 14 8F 56 5D F6 BA 89 74 A2 90 05 C7 5F 78 90 FB CB
5C 95 82 A7 96 DF 59 BA 62 29 B9 38 DD DF F4 C7 DD E0 21 02 98 4F 90 64 7B 67 63 C9 FA 31 6A F8
9B 75 F8 1F 70 30 04 AC 0D 46 3A 8A 2C 5D A4 7D 34 5D 48 22 4F 70 37 58 DF EB FC FD F0 F7 B8 B4
69 0D D1 68 9A B4 1F 71 8F 07 4F 49 4B EE 5B 87 C7 8E 6A 9F 08 A0 DA 5B 05 2C 40 CE 7F 95 45 BC
93 B5 82 04 04 77 1A 7E 99 07 F7 D2 46 BE 78 58 BD 25 A2 32 F5 D8 BE 4F 6B FC 59 BB B8 30 F9 6C
19 DE F5 8B E8 24 4C F8 DE 52 12 3A F2 C1 CB E6 D1 95 13 53 CD 3E 47 ED 2C C7 D5 22 F8 AD 12 D1
34 3E 22 FD FC 26 7A FD 6D 63 92 D1 80 EC 25 4A 1D C0 D1 22 BC 86 5F 7E 4E CB 57 3D 98 BC 8E 8F
2C 73 C0 59 62 FD 55 F7 38 3E 1C 82 10 D5 AA 62 D8 35 37 C0 2D 36 ED C7 83 73 3B 8D 8E 7A 5D 6C
64 33 D5 09 B9 73 C2 10 6B C7 02 7F 27 79 4D AC 92 4C 88 8E 38 2C 88 5B 62 6D 7E 2C 33 41 C4 C8
D8 02 11 2E DA 85 90 D6 08 AC E7 91 09 C2 58 DE 7C DA 5E 8E AD FB 5C 5C 52 0E C0 EE B8 98 6F 82
C0 27 C0 1D 42 4A 37 33 C2 00 50 2C 4D 7E 7C F5 5A F2 9A 4B 86 66 C1 CF 6A 3B A8 8B 9C 3C 34 9A
B9 63 E3 83 24 89 8F BB 35 4F EE DD 0C 19 5A 9B 78 78 78 58 1B 7C E6 92 3D FB 08 1B 40 90 5B DA
E2 B4 62 84 4F F1 B2 4D 68 57 D9 C2 AC FD A5 AE 46 D4 C8 7D 9B F1 DB 2F 7B 75 00 EA 2D 17 C1 A4
AA D1 D9 23 36 88 3D F6 69 DB 69 2D 04 E7 1D 25 B5 B1 1E A9 81 91 AE FE F8 52 77 16 D3 54 7A BE
CE 4B C3 3D 17 9D 74 3C EE 54 39 A3 8F 79 9A 92 5A 40 0E 4E 14 C2 D8 B4 E3 79 62 84 75 BC EB 95
5C BE 09 C0 00 DD AC 4A 9F 94 13 D7 B3 4E 06 41 34 43 66 6C 50 02 A1 AA EC 01 2B B0 6D 2B 20 37
A6 4B 36 27 97 50 B9 98 95 9D F7 BB E3 2B 32 5A 4F 02 29 CD 26 AB 25 9C 14 C5 84 6C BB FC 45 C8
BE 7E C9 76 63 88 D3 AF C0 54 EC 92 05 BB 2C 37 F8 62 73 C6 F4 20 FD 49 33 5B F6 EE B2 5A 90 75
05 80 1B 9D F2 18 DF F3 9F 29 DD 9E D9 AB A3 D8 FD A2 71 CC 85 41 09 91 87 D1 6C 5F 10 A9 2B 53
19 AF 6A EC 83 C1 33 44 A5 45 02 1F CE CC A8 32 F4 73 51 9D 52 6D 85 85 54 3D FE FD 2C BB F4 F2
64 EB 0D F8 48 81 1E F3 5D D8 E0 F0 73 FA 63 79 EF E5 80 01 5B D8 15 3D F8 9E D8 24 BB 0A DE 5A
AF 07 8D E1 0B CA 13 64 E9 85 10 6B C2 9C 4A BB CC CE 52 72 1F AE 23 CE F4 6F 27 60 2A DF 37 65
17 50 DE 7C 77 7A 9D FC D9 94 52 33 99 96 4F 24 B6 A9 5D 71 1B 62 1D 81 79 64 D8 EC 58 12 E2 45
ED AF 71 4D 9F E1 7E 55 DD 37 16 1D 27 0D B4 E9 DC C1 39 5C 38 3A E4 A1 A2 DD 31 08 12 6F B9 56
16 BE 36 D8 52 F4 C8 7D FD 1F 84 E2 EE CC 7A 93 00 95 A7 E6 1D C7 08 D5 21 B2 AB B0 5A 21 86 DE
69 BD A1 B1 A1 15 69 17 DE B7 61 20 18 1B BD 27 3C 23 62 CC 99 9D 7D E5 53 61 0A 02 E8 37 2A 6F
E4 8C 38 73 09 ED 36 B2 A8 A2 96 F9 51 4A 27 F9 C3 CD E5 F8 B3 0A 79 8E 52 7D 86 32 47 8C 89 62
7C 98 08 B1 2D 9E 85 87 5C 0F 88 DF 14 8D 61 14 E5 DA 90 E0 03 C3 3D 25 29 20 09 F8 27 BB DB D3
16 89 28 F9 9F 51 56 3C 5E EA 61 15 B0 94 B3 45 D6 D4 3C 80 3D 42 A3 6F 53 CF 8C D3 84 CA 25 07
2F 01 32 B0 60 44 B3 2D 09 CE 58 1C A4 97 60 62 4E 93 08 6D 27 2A DF C0 E3 A9 6F D9 98 F5 8E 77
E6 06 31 50 5D E7 81 8B 1A 59 6F 7F D5 17 76 BF 28 3C C8 4A DE 3B 7C 67 F5 BB 82 10 82 8A E6 3C
DF 9B 5A 1D 3F 70 F7 22 BC 89 A3 D8 D3 F1 8E 5E E9 19 A6 DC 93 35 53 15 3D 25 EC 83 1E D5 81 71
61 FB F2 6F 47 46 DF 40 41 72 A2 57 2C 69 FE 91 7B 2C 6E 8E C2 6E 3C 87 0E BA 1D E7 B7 F9 63 AD
35 9C FB 80 CC FA 49 B6 A2 8C 20 2D 74 8A 75 77 43 28 82 B5 85 BE 54 86 82 22 20 16 58 33 B1 95
11 9D 94 C8 1B A1 DB AC 73 C0 9C 1E 59 DA 42 FA C1 BA 8D 79 47 5D 47 EB 7B 05 7D 49 C3 A8 8C 3F
FD 8A 25 D7 0C 10 68 BA 68 11 AD F0 22 46 BC EB C4 05 A5 E7 8D FE 61 78 AC 67 BE 56 9B 67 CC 34
21 12 A8 63 23 B6 AC A6 77 76 8C 4C B5 35 D2 61 68 CA 15 83 A5 A0 72 F2 3E D8 02 64 AB E3 9B 27
01 27 70 8E 29 F6 AB 4E ED D2 AE DA 50 CE 31 35 67 13 6F 65 FE 54 7C 4C DB 57 09 0D 47 5C 19 11
31 AB 93 B9 3D 9C 66 D6 C7 E4 8C 1A 22 40 AC 6E AE EA C2 E2 1C 92 BC 53 2E 22 9E A5 0D 29 E1 72
B0 2E 02 75 AC A8 C5 7A 06 67 BE C5 8D 37 10 0E D6 D7 89 F7 0B CC 9F CC 99 92 96 29 DA BD ED A0
66 9C DD 41 30 3F 0D 3B 8D E0 01 AF 2B 5B A8 29 2D 35 83 89 EB 4F 5A 75 CB 9F 52 A0 3C 07 C3 D0
10 96 01 F5 75 69 10 A9 6D 8D BE 29 41 1C 98 2C CA EC EC 79 35 EC C3 D1 85 E7 07 46 AE 23 62 5B
F7 74 AC 4C FC 75 9B BE B7 0B 64 E2 9D AD 7A F7 41 B4 97 02 66 32 33 16 0B 62 5D 43 17 8D EE 41
83 61 18 C7 EC 00 F0 87 89 55 EB 01 80 F8 28 F2 FB 14 72 57 FD 2C E1 45 2E C4 D0 92 E3 3D C0 1F
18 4D 14 FC E9 7C 9D 9B EB C9 45 2C 69 F9 EF BD D1 EA 91 5B 81 7E 39 72 54 D1 4A B6 D1 1B 50 96
6F E4 98 CB 8C 3E CC 34 77 88 68 18 D2 0C 62 67 F8 32 63 87 61 9B 03 6E 4A AE DB E8 2A 75 46 1E
A7 57 DF 57 C6 78 D3 23 97 B5 21 A4 13 70 45 98 05 7E 7E CA 45 76 9E B4 C9 F8 50 89 44 D9 B6 F0
79 32 EB 54 17 AD D1 31 BB E3 C2 D8 C5 D2 71 B3 14 FC 87 9B 59 B2 81 0F C8 B0 3A 07 DC 40 61 DA
FE CD E2 C6 DD 70 26 E5 5A CE 9F 78 C5 D0 D5 A0 32 3C DF F2 DC 1A 25 BA 66 00 67 91 3F D0 5A 1E
        %>;
		
		address_list = []; address_list[127] = void;

		for(var i = 0; i < 4096; i += 4) {
		    EncryptionControlBlock.add(
                (tempBlock[i]) |
                (tempBlock[i+1] << 8) |
                (tempBlock[i+2] << 16) |
                (tempBlock[i+3] << 24)
                );
		}
	}
    
    var xcode_seed;
    function xcode_rand() {
        var seed = xcode_seed;
        xcode_seed = (1103515245 * seed + 12345) & 0xFFFFFFFF;
        //Debug.message("xcode_rand: " + xcode_seed);
        return (xcode_seed ^ (seed << 16) ^ (seed >> 16)) & 0xFFFFFFFF;
    }

    var xcode_op_mov_val = 0;
    var xcode_op_mov_reg = 1;
    var xcode_op_not = 2;
    var xcode_op_neg = 3;
    var xcode_op_inc = 4;
    var xcode_op_dec = 5;
    var xcode_op_add_val = 6;
    var xcode_op_sub_val = 7;
    var xcode_op_xor_val = 8;
    var xcode_op_add_reg = 9;
    var xcode_op_sub_reg = 10;
    var xcode_op_push = 11;
    var xcode_op_pop = 12;
    var xcode_op_shr_reg = 13;
    var xcode_op_shl_reg = 14;
    var xcode_op_imul_reg = 15;
	var xcode_op_load_arg = 16;
    var xcode_op_interlace = 79;
    var xcode_op_table_ECB = 80;

    function xcode_push(xcode, n, inst)
    {
        xcode[0] += n;
        if(xcode[0] > 128) return false;
        xcode.add(inst);
        return true;
    }

    function xcode_building_first_stage(xcode)
    {
        switch (xcode_rand() % 3) {
            case 2
               :// MOV ESI, EncryptionControlBlock : BE
                // MOV EAX, DWORD PTR DS:[ESI+((xcode_rand() & 0x3ff) << 2)]
                xcode[0] += 7;
                if(xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_mov_val, EncryptionControlBlock[xcode_rand() & 0x3ff]]))
                    return false;
                break;
            case 1
               :// MOV EAX, xcode_rand() : B8
                if(++xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_mov_val, xcode_rand()]))
                    return false;
                break;
            case 0
               :// MOV EAX, EDI : C7 8B
                if(!xcode_push(xcode, 2, [xcode_op_load_arg]))
                    return false;
                break;
        }
        return true;
    }

    function xcode_building_stage0(xcode, stage)
    {
        //Debug.message("xcode_building_stage0: " + stage);
        if (stage-- == 1)
            return xcode_building_first_stage(xcode);

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        switch (xcode_rand() & 7) {
            case 1
               :// NOT EAX :D0 F7
                if(!xcode_push(xcode, 2, [xcode_op_not]))
                    return false;
                break;
            case 0
               :// NEG EAX : D8 F7
                if(!xcode_push(xcode, 2, [xcode_op_neg]))
                    return false;
                break;
            case 3
               :// INC EAX : 40
                if(!xcode_push(xcode, 1, [xcode_op_inc]))
                    return false;
                break;
            case 5
               :// DEC EAX :48
                if(!xcode_push(xcode, 1, [xcode_op_dec]))
                    return false;
                break;
            case 4
               :// PUSH EBX : 53
                // MOV EBX, EAX
                // AND EBX, AAAAAAAA
                // AND EAX, 55555555
                // SHR EBX, 1
                // SHL EAX, 1
                // OR EAX, EBX
                // POP EBX
                if(!xcode_push(xcode, 21, [xcode_op_interlace]))
                    return false;
                break;
            case 7
               :// XOR EAX, xcode_rand() : 35
                if(++xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_xor_val, xcode_rand()]))
                    return false;
                break;
            case 2
               :if ( xcode_rand() & 1) {
					if(++xcode[0] > 128) return false;
                    // ADD EAX, xcode_rand()
                    if(!xcode_push(xcode, 4, [xcode_op_add_val, xcode_rand()]))
                        return false;
                } else {
					if(++xcode[0] > 128) return false;
                    // SUB EAX, xcode_rand()
                    if(!xcode_push(xcode, 4, [xcode_op_sub_val, xcode_rand()]))
                        return false;
                }
                break;
            case 6
               :// MOV ESI, EncryptionControlBlock : BE
                // AND EAX, 3FFh
                // MOV EAX, DWORD PTR DS:[ESI+EAX*4]
                if(!xcode_push(xcode, 1+4+1+4+3, [xcode_op_table_ECB]))
                    return false;
                break;
        }
        return true;
    }

    function xcode_building_stage1(xcode, stage)
    {
        //Debug.message("xcode_building_stage1: " + stage);
        if (stage-- == 1)
            return xcode_building_first_stage(xcode);
        
        // PUSH EBX
        if(!xcode_push(xcode, 1, [xcode_op_push])) return false;

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        // MOV EBX, EAX
        if(!xcode_push(xcode, 2, [xcode_op_mov_reg]))
            return false;

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        switch (xcode_rand() % 6) {
            case 0
               :// ADD EAX, EBX  : D8 01
                if(!xcode_push(xcode, 2, [xcode_op_add_reg]))
                    return false;
                break;
            case 3
               :// SUB EAX, EBX : D8 29
                if(!xcode_push(xcode, 2, [xcode_op_sub_reg]))
                    return false;
                break;
            case 5
               :// NEG EAX, ADD EAX, EBX : D8 F7
                if(!xcode_push(xcode, 2, [xcode_op_neg]) ||
                   !xcode_push(xcode, 2, [xcode_op_add_reg]))
                    return false;
                break;
            case 4
               :// IMUL EAX, EBX : C3 AF 0F
                if(!xcode_push(xcode, 3, [xcode_op_imul_reg]))
                    return false;
                break;
            case 1
               :// PUSH ECX : 51
                // MOV ECX, EBX
                // AND ECX, 0F
                // SHL EAX, CL : E0 D3
                // POP ECX
                if(!xcode_push(xcode, 1+2+3+2+1, [xcode_op_shl_reg]))
                    return false;
                break;
            case 2
               :// PUSH ECX : 51
                // MOV ECX, EBX
                // AND ECX, 0F
                // SHR EAX, CL : E8 D3
                // POP ECX
                if(!xcode_push(xcode, 1+2+3+2+1, [xcode_op_shr_reg]))
                    return false;
                break;
        }
        // POP EBX
        if(!xcode_push(xcode, 1, [xcode_op_pop]))
            return false;
        return true;
    }

    function xcode_building(seed)
    {
        xcode_seed = seed;
        var xcode;
        for (var stage = 5; stage > 0; --stage) {
            xcode = [5 + 4]; // xcode limit = 128
            if(xcode_building_stage1(xcode, stage) && xcode[0] + 5 + 1 <= 128)
                break;
        }
		// compile function
		var funcstr = [
			"function(arg) {",
			"var v,v2,st=[];"
		];
		for (var i = 1; i < xcode.count; ++i) {
            var inst = xcode[i];
			switch(inst[0]) { // op
                case 0://xcode_op_mov_val:
                    funcstr.add("v=" + inst[1] + ";");
                    break;
				case 16://xcode_op_load_arg:
					funcstr.add("v=arg;");
					break;
                case 1://xcode_op_mov_reg:
					funcstr.add("v2=v;");
                    break;
                case 2://xcode_op_not:
					funcstr.add("v^=0xFFFFFFFF;");
                    break;
                case 3://xcode_op_neg:
					funcstr.add("v=-v;v&=0xFFFFFFFF;");
                    break;
                case 4://xcode_op_inc:
					funcstr.add("++v;v&=0xFFFFFFFF;");
                    break;
                case 5://xcode_op_dec:
					funcstr.add("--v;v&=0xFFFFFFFF;");
                    break;
                case 6://xcode_op_add_val:
					funcstr.add("v+=" + inst[1] + ";v&=0xFFFFFFFF;");
                    break;
                case 7://xcode_op_sub_val:
					funcstr.add("v-=" + inst[1] + ";v&=0xFFFFFFFF;");
                    break;
                case 8://xcode_op_xor_val:
					funcstr.add("v^=" + inst[1] + ";");
                    break;
                case 9://xcode_op_add_reg:
					funcstr.add("v+=v2;v&=0xFFFFFFFF;");
                    break;
                case 10://xcode_op_sub_reg:
					funcstr.add("v-=v2;v&=0xFFFFFFFF;");
                    break;
                case 11://xcode_op_push:
					funcstr.add("st.add(v2);");
                    break;
                case 12://xcode_op_pop:
					funcstr.add("v2=st.pop();");
                    break;
                case 13://xcode_op_shr_reg:
					funcstr.add("v>>=v2&0xF;");
                    break;
                case 14://xcode_op_shl_reg:
					funcstr.add("v<<=v2&0xF;v&=0xFFFFFFFF;");
                    break;
                case 15://xcode_op_imul_reg:
					funcstr.add("v*=v2;v&=0xFFFFFFFF;");
                    break;
                case 80://xcode_op_table_ECB:
					funcstr.add("v=EncryptionControlBlock[v&0x3FF];");
                    break;
                case 79://xcode_op_interlace:
                    // PUSH EBX
                    // MOV EBX, EAX
                    // AND EBX, AAAAAAAA
                    // AND EAX, 55555555
                    // SHR EBX, 1
                    // SHL EAX, 1
                    // OR EAX, EBX
                    // POP EBX
					funcstr.add("v = ((v & 0xAAAAAAAA) >> 1) | ((v & 0x55555555) << 1);");
                    break;
            }
		}
		funcstr.add("return v&0xFFFFFFFF;}");
        return funcstr.join("\n")! incontextof this;
    }

    function cxdec_execute_xcode(hash)
    {
        var index = hash & 0x7f;
        hash = hash >> 7;	

        if (!address_list[index]) {
            address_list[index] = xcode_building(index);
        }
        return [address_list[index](hash), address_list[index](hash^0xFFFFFFFF)];
    }

    function __cxdec_decode(hash, offset, buf, len)
    {
        var ret = cxdec_execute_xcode(hash);

        var key_8 = (ret[0] >> 8) & 0xFF;
        var key_9 = (ret[0] >> 16) & 0xFF;
        var key_10 = ret[0] & 0xFF;
        var key1 = ret[1] >> 16;
        var key2 = ret[1] & 0xffff;

        if (key1 == key2)
            ++key2;
	
        if (!key_10)
            key_10 = 1;

        if ((key2 >= offset) && (key2 < offset + len))
            buf[key2 - offset] ^= key_9;
	
        if ((key1 >= offset) && (key1 < offset + len))
            buf[key1 - offset] ^= key_8;

        buf.xor(0, len, key_10);
    }

    function cxdec_decode(hash, offset, buf, len)
    {
        var bondary = (hash & 0x190) + 0x4A7;
        var dec_len;
        if (offset < bondary) {
            if (offset + len > bondary)
                dec_len = bondary - offset;
            else
                dec_len = len;
            __cxdec_decode(hash, offset, buf, dec_len);
            offset += dec_len;
            buf.ptr += dec_len;
            dec_len = len - dec_len;
        } else
            dec_len = len;

        if (dec_len)
            __cxdec_decode((hash >> 16) ^ hash, offset, buf, dec_len);
    }
}

Storages.setXP3ArchiveExtractionFilter((new cxdec()).cxdec_decode);