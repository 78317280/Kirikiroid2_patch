@set(_DEBUG=0)

class cxdec
{
    var EncryptionControlBlock;
	var address_list;
	
	function cxdec() {
	    EncryptionControlBlock = [];
        var tempBlock = <%
88 25 F3 20 A3 05 36 57 EF 5A 41 96 C8 40 BA BB 39 87 2E F6 A5 05 E4 15 A9 88 E4 14 86 CF E3 B7
FD 94 76 EB 11 DC DD D3 26 08 19 17 CF B4 0E E2 8E 69 9A 1F CA 37 29 CD 6E 3B 07 EF 53 25 F5 F3
7F FE 99 BF 93 61 13 7A 48 B8 52 B9 DC 27 93 96 FE AC 10 24 ED 33 2F B5 41 60 BC 1F A4 9C 27 1D
91 0F 85 35 FD 7D 51 0C CA 9A 97 09 69 07 4B 50 DF 0B EF 50 D9 F9 CC 0B 09 AA D9 7A E5 D4 DB C5
16 34 CA 42 C9 E8 68 B3 87 9C 92 5A 6E 21 8D 98 F1 A2 E8 17 3B 86 F9 A4 8A 3C 57 CD 8B 70 35 9A
F8 4C B6 6E 1D 95 28 72 DB F2 C5 A0 E4 9C 80 B9 6A 7C F6 E4 28 99 08 2D E2 C9 11 F7 EE 6F 0E 96
FC 74 D4 7D 76 9D C5 E9 C6 82 D5 69 A3 89 C3 6F 7E F5 E4 5A 6D 29 14 C4 6A E2 50 FB 06 B1 2E FB
70 65 20 DE 1C C8 76 B0 28 6C D5 01 15 37 C6 7A 46 6F 72 67 1A A4 DD 5F D3 92 F6 80 F0 C9 B7 DB
74 85 68 CD 34 E3 BA C8 C3 09 4F 3E D6 C7 C0 E5 95 62 07 D1 2B E5 1B 45 21 0F 94 98 AB 99 60 79
C8 05 A9 F0 1F 7B B7 E2 A8 BC F0 6D 92 59 EC 19 EA CE 9D DF C8 57 65 1F 60 32 A3 68 77 DF 62 21
D1 97 0E 67 0C 27 9C D4 77 CC 07 D5 D4 D3 FA 25 78 3B 1C 74 21 10 AF 6C A3 41 08 22 E5 53 93 FE
4C 6D AF D9 00 27 E2 57 F7 B6 E4 DC 8F F9 8C 83 D5 12 88 1F 41 02 91 9B 83 A6 F2 33 2B 4F FE B8
28 F7 45 4C 41 11 E9 CF 49 35 C7 C2 92 2F B1 E5 9C DE FA 71 16 2E EC B5 A8 43 0B 9B 58 9D 96 AB
1C B9 29 3A 55 1B E9 2F 87 28 2F 29 63 2D 47 DA 76 20 9C E0 24 C6 05 75 28 A8 82 AE C1 65 8C 79
BB 5C CC C9 D3 8E EC D9 68 67 8A F8 51 95 C6 DB 6D F6 2C EC 96 B4 51 A2 F0 B5 5F 6F 4D 36 1D A3
0C 95 0E C1 EC 28 DB 3C 05 B4 CE C8 30 EF 76 65 DC EA 86 96 29 41 BA 0E 8C 84 B5 E5 33 18 82 18
73 9B F8 AF 9C D5 79 68 42 CD 75 70 F6 8B 0D 56 16 0E 1F 38 5D 9D C8 92 2D 5B 8D 6E A8 7E D8 65
F1 A5 A6 8E 5D 48 ED AA E4 55 41 EB B6 F0 3D E6 89 39 90 05 A9 71 9D 34 6A D9 BF E0 A6 84 B1 D4
87 BE 49 36 37 CE 83 D7 7C B6 C1 03 70 2E A9 BC C4 7A 1E 88 73 1B 1C A2 69 C3 79 94 C9 06 47 E4
8C 1D 8A 0C 02 99 AA 0C 92 9E C2 FC 19 AC 42 D8 6E E9 0B 02 B3 EA C3 97 E1 CF 29 B3 37 AC 63 03
FB 8A F5 CB 93 E9 EA 03 E5 CC BB 94 64 C2 58 E3 01 52 62 59 49 45 E6 3C 77 E6 E2 64 20 55 1F 39
54 C6 66 E5 9F 3D 54 A0 0B 74 16 F9 85 EE A6 03 B0 43 39 4F 54 45 56 9E 11 18 C1 0D 8E A2 22 A1
9D FE 1B 64 18 5A 1F B6 A3 C7 D6 77 AF C0 68 12 C7 B9 20 42 CD A9 6E 71 DC A3 02 CA 8E ED 60 F0
D9 07 85 3B 33 ED 17 02 12 2D 0E E8 AC 3E A8 E6 F2 4B 3B B6 BC 46 19 A3 71 6E 7E 80 BE 86 E9 89
6B FD CD F6 88 84 EF 9B 74 41 5E A1 C0 AC 08 2D E6 35 6C B9 F1 6D 93 10 89 AF 1C 77 EA 82 79 6B
EB F7 F9 11 7D 90 10 3E 2D 88 B4 4C 7D 18 7E BB 00 11 25 5C BE 40 69 D3 F0 E5 B5 96 09 5E 67 D3
0D D3 CF D2 EF 6A D1 FC 5A B7 D2 7B 51 B3 BF EB 31 5B 5E 69 CF AC D6 E1 40 66 F6 0C A8 48 58 3C
E0 94 6B 1E 14 F4 C4 A2 B1 86 6E CB 26 94 07 AB DC 0B 90 06 2E B4 41 1B B8 D0 F8 68 2E 56 9E 83
63 FD 5F 54 8A AA 29 27 4A 6F 0D CA A3 C1 28 02 55 67 E3 C6 16 F6 BF 22 8F 2D D4 45 1B 45 37 D6
C5 18 E1 19 CA F5 AC D2 55 E9 65 D6 A8 9C A4 D7 23 F4 3A E6 E2 DE 08 33 4F E4 00 A1 8E 3D 7C 20
DD BC 79 C5 FB AA E0 57 48 2B 4E EE 6D DB 7C 4E 88 7B F5 70 01 6C 25 EE 79 12 42 08 E5 3B EA DD
9B 66 9A D7 08 A2 8F 0A 1D 13 26 65 54 A8 34 A5 ED A5 98 5B 21 E4 68 F7 C8 24 B4 86 C6 A4 F6 88
BF AD 7F C9 8F 95 6E D5 67 53 78 87 6E E6 1D 7E FC 13 B1 2D AE BC 45 2C F6 61 09 5F B0 FC 15 BC
D9 C9 2C 74 BE 68 A8 70 72 7E D4 25 FD 2C E0 42 4B BA 49 C3 EF 3E 12 11 2B 18 C3 43 9B 35 FB 31
21 15 A6 95 75 46 CF 94 69 1D AE 93 4C 0C 03 B4 A9 97 CA F3 72 41 C3 50 0B 5D F8 52 41 2A 07 E0
96 2B 5C CD 38 98 2A BD 5D E7 F3 AF B1 F4 34 38 7C 75 5C DF B1 E7 19 23 92 EB 20 5C 3A 97 3C AE
BC BE 8F 8B F8 4F 91 B9 68 4A 46 36 7D 9E FE 59 E3 7C 42 EE A6 14 42 9D 3A 7C F6 98 C9 DC A1 B8
55 40 DE DB 19 17 B2 95 16 54 DE D9 F9 E9 B1 F2 F5 FA 0D A1 A5 A9 29 07 E3 97 9E 0B FC 3F A4 86
F4 A8 51 65 1A 85 7A 5A CC E1 51 79 53 F7 93 1B 77 E4 CD A7 2E CB 7E 8D 64 7A 54 95 27 AB 66 E2
B0 A3 DD 49 A8 81 EE 18 30 97 84 75 B9 0B F6 5E 04 FE 21 82 6E 42 04 12 B6 B8 9C 24 E0 8F C6 38
13 EF 27 5C D5 17 FB 28 0B F6 4B 02 D8 8D A5 77 5D 90 AD 44 04 9C FC 2A 23 25 89 31 93 44 31 A3
A5 5F 10 C3 46 D8 71 5F 62 4B 14 8D CC F1 36 B4 B6 70 F9 51 94 DF 65 57 29 FD B0 46 ED 6E 4E F2
6A CB A9 F7 FA 09 31 E5 4E 16 19 AF 3B 8B 56 DD 6C 9F C0 B1 18 D8 D8 FA 53 67 F2 85 BC C0 EC F5
4A 7F 7C 35 2B 3F E1 76 4C 70 E6 F6 0B B8 6F FC E5 69 65 E9 4C 7F E8 82 75 71 D8 55 C1 20 97 8D
61 C9 4E A6 AB F2 17 49 56 89 35 3D 67 13 A5 08 EE 44 82 F9 21 EE 09 94 04 0B 9B C9 91 6E DA F7
48 D8 D2 59 69 E0 82 D4 2D F1 4A 34 6D AB B4 7C 1E C4 CB 22 4E D6 2A 36 83 AB 3F 7A 85 67 B5 48
92 46 B8 F0 9B 90 6A 98 CD F7 BF AF FA A3 DE 97 6E 68 00 7F F3 DA F9 77 00 65 9A 8E B0 82 F2 86
F6 0B 92 F5 5D 6B C5 E6 53 F8 B2 C3 38 DD B4 91 05 33 07 66 B9 DE BA E2 6B F9 40 7B FE 40 4F A4
0B E5 20 F8 07 55 8D 45 13 BE 2B D8 B4 AC 86 A6 F6 89 64 1D 4D A6 E6 5F 67 DD 11 CC B6 84 A3 66
AD 6D 3E 0F 60 71 59 56 F9 CF 58 9C C2 DD 9A 65 16 D9 8D FD 1E 6B 79 0E 22 65 0D BA B7 4F 24 7B
5B 42 AE AA 9B 92 D1 7D A9 3E CA 85 72 A2 F4 90 78 9D 41 6B CC 61 0E 46 B9 D3 3E 37 AB A8 63 EB
65 59 C8 1F ED A4 79 3A DC 01 31 73 4E 18 9D CC C8 5B AA A1 27 E4 8B 47 C4 0D A2 55 64 98 87 9D
E3 72 69 EB D6 38 D8 EE C1 F9 0F 70 2D 02 26 E3 B4 40 3D 2C 2B C9 A5 30 79 21 B4 30 A4 19 FD 71
B7 79 52 1E F3 C0 E9 4B 3A 7B A6 01 23 05 FE 57 CD 0E 5F 70 0F 22 84 49 F4 03 64 92 5A 50 CC DC
89 EA D9 87 7B E3 4D 00 B7 54 D3 4A E5 94 B6 0C 69 46 D5 9D 46 AA 3E 20 E5 F7 5E 47 8D B4 F5 D1
9D 4A 50 4C 10 9D AA 49 E9 94 ED 68 62 90 59 66 96 9B 62 C8 BC C2 DF 07 22 1A E5 7C BC AE 36 18
1C F4 40 41 D8 99 02 E7 92 19 B2 C8 8A 31 56 34 79 F5 B8 64 F0 45 1E C5 DC 7D 60 2C A1 82 4A 0F
8B B4 38 44 5A 50 2B 10 CA 9F B6 1A 04 A8 B5 99 80 41 76 1B 63 87 74 77 3D 05 92 59 FC D8 5E C8
2F B2 74 5B E9 1E 54 98 DD 11 11 CD DA 6D F6 60 93 E0 14 A2 E9 EE 03 DE E7 2A 4F 52 4B 73 8C 1B
F7 96 61 3A B2 E7 D5 A4 E4 1A 01 18 4C AD 22 35 FA 2A F8 D3 CD F5 06 99 DB D5 67 5C AC 97 B7 E9
03 7D 6B 68 9C 40 DB 0A F5 85 58 1A 80 40 D4 61 D2 60 D1 A1 C9 BA B9 8A 3C 38 94 10 BC 7E 73 05
30 BB BA 9F 3D 4F F7 18 DF 86 BD 02 FE 42 F5 DC 1D 5C D3 E9 84 27 E4 EE 9B F8 73 E5 A2 A4 C7 38
66 EF B9 07 81 8A C4 20 32 7E 09 26 6C 55 43 65 C9 6B 8C 0F 36 85 5B A3 07 FD AF A5 3F 5C C0 54
2B 79 CF C8 AA 12 CB AE 09 83 09 9D 0D E9 80 47 2B 88 72 D3 B1 44 49 63 A5 40 0B 44 21 ED C7 A3
C2 D6 85 85 E3 AA 1F F8 6C 31 93 82 8C FC F1 4F 0B 21 FB A1 8F 17 70 59 87 A4 28 93 41 32 8B B7
D7 81 48 B4 E6 43 C8 26 85 08 4C E3 15 D8 E8 4B 5A BB 5B 5A EA 98 7F 5F D1 71 8A 5E 0E C8 0B E2
D9 6A E8 FB 26 4E C4 E5 2C A2 C2 E0 D6 A8 55 15 F9 C8 A0 5D 73 CA 49 41 2A A3 E4 F7 7E A9 C9 D9
B3 B9 72 D8 35 3C D4 DE 16 DC 52 9C 06 CF 74 4E AC 77 23 15 83 A7 9F 16 1E E4 B2 79 04 D0 AC 0B
97 6D 93 2A E3 8A 15 1D 52 38 37 35 1A A0 1D C0 27 2D A7 9C B6 C3 6C 4B 30 30 17 46 EC 59 E2 3A
38 2B 65 52 0E 0E 8D E6 64 1A 60 FB D8 A7 CD A6 50 75 98 7C 33 03 83 36 C2 9F 57 93 52 DC DB 98
D9 E7 E1 08 AA CD 6C 94 A6 B8 53 D3 B5 47 A2 DE 92 E6 C3 71 C9 52 97 1A 1B CB 7B 45 E1 10 0C 0C
D7 A4 D0 B7 77 B0 D9 34 F2 B5 25 7C 79 A9 DA CD 1F F8 A8 B7 A9 92 7F 77 D4 D2 CE A7 B4 7F 4F 67
77 C1 A5 37 2A C5 0F 75 15 48 04 5A FC 5C C4 D8 90 02 73 12 AD A5 89 2D 60 80 4A BB BA 76 01 BE
2A DB 3F 37 DB AE 39 8A 0B 73 A1 C1 2B A1 8B AE 0B 39 8F 8F 82 EA E2 C4 93 6F 04 40 EE 1F DA 72
4B B0 E7 CA 96 2D CB 6E C7 D7 68 DE 5F 99 B3 3A 7E D4 75 55 35 05 63 B2 98 5D 93 11 21 BC BD BE
23 42 31 78 27 E1 56 37 09 B6 E8 3D 77 E6 43 57 27 60 5E 06 D8 B5 7E EA A4 62 D7 0B 51 29 DC EF
BE 3E 0B BA A3 88 80 14 C2 FB 32 28 A8 F7 EC CE 49 32 C0 58 86 8F 44 9F A2 CB 7E AB 5A E4 BC 0F
40 16 B6 58 53 E0 EC BE E1 AA E6 25 58 1F B8 B6 61 90 2A 11 74 0F 96 AE 7C 00 00 B1 5A 0E E4 61
24 F8 CB 9A 4B 1A 0B 6B 2A 08 A5 9B 5F 9E CA AC BD DE 53 12 10 E6 48 2D 92 B2 F3 A8 3E C6 10 BD
05 DE 62 42 5D B0 09 EA 11 4A 59 E8 66 F2 4D 82 71 83 9A 9C 11 1E D8 1A 13 72 44 98 29 4F 41 1C
5B DA E6 13 3E 8C 88 08 32 2C 74 99 A6 0E E1 1A A5 04 80 C6 CC 40 9C E7 51 84 47 47 0D F5 69 F8
A1 3D ED C4 FE 9D 10 55 A6 3F 33 0B 16 DE D7 91 60 FE 14 D5 5F E4 28 54 D9 D1 5E AB EB B6 CE 58
79 F9 A5 D4 0E 73 4A C7 D5 BA D4 0B DA 0C 92 57 C9 46 97 C5 E0 F7 89 2A 12 C8 CA 28 64 B6 E1 2E
AD E1 92 26 C8 05 01 28 C5 56 22 BF A0 E6 10 61 BC 01 2E 28 6C 65 8F 5B D0 EC 80 6A 9F 92 99 F3
3D E1 9C AC 7B 04 00 29 A8 F6 71 D1 BF E8 15 B5 9C 29 39 14 F4 76 A3 18 84 A1 2E 7B C0 92 DF 54
78 14 6D 7B 65 CF 8C 5A E3 EE 65 11 F7 AE AE 18 F1 E8 26 94 9D B1 56 45 2F 2D CD A1 99 E3 09 8E
01 02 96 0A B7 33 27 E6 BF 37 5E 10 32 4C DA 78 3E C7 26 A3 50 ED 48 05 6A C7 BA 0F 04 E4 9A 87
7F 0F 66 E4 5F 6A 1E 72 23 20 C2 AA 79 6D E2 00 9A 1C 63 06 DC AE A7 4F E5 53 7E 63 9F 69 ED A8
36 68 5D C4 8E 2E 49 41 3A D0 6A 7A 84 CB 62 03 87 CB F8 F1 AC 44 8B 1D 11 6D 84 C4 E8 B9 A5 24
A6 30 90 12 79 A0 CE 3F 4B 12 33 C2 35 1B 50 85 7E 8A 11 01 30 25 45 E4 09 D9 1C 17 E5 9F 3A 0D
51 82 92 5B A8 05 E5 02 43 99 4F 50 0B D8 63 33 8F F8 18 0E 7D 40 4A D3 06 1E 32 8F C6 CB C1 87
4A 44 75 58 E5 06 23 BF D5 F2 98 9A 28 D4 CF 2C 79 6F AB D6 3F 00 EC 69 51 6A D3 03 4B 62 0C BB
EA 48 41 98 B7 A0 76 01 F6 11 4E 73 E9 7B D4 22 56 20 C6 9E E3 12 EA C4 8F 73 CC 48 8D CD 24 FE
68 8C EE 09 39 B3 49 9A 1E CB 5E 53 FD 3C 50 8F A2 3A 8B 80 00 07 44 B9 CB F6 06 30 BC 73 C2 45
A5 BB 76 D1 B3 FE 4C D0 B5 0E DD 63 3F 21 38 F4 F6 29 48 7E AD 4E 5C 6F 35 FB CA 70 C6 CE F7 59
2E 85 1B D0 57 FA F8 93 92 61 24 22 A8 60 0F C9 61 C2 03 94 46 9C AA A0 7A BB 5E 45 DC 0B 3B B9
59 82 58 89 0C 82 4B 50 8C 88 79 9C E8 A3 3A 49 B3 A4 B6 55 22 24 F2 1F 61 11 F0 E9 F3 D2 ED 96
2B 46 74 84 E4 30 17 35 6B 68 C2 F6 76 87 98 3F E4 33 86 F6 15 D1 FD B4 96 3D D3 BA 0C 17 E1 13
1B BA 85 11 12 48 FA 41 E2 4B 7C 83 B9 C5 67 C8 4D B7 64 7B FE 00 60 F6 E6 8C E0 CD 83 C9 A3 18
8A C9 99 E4 53 E0 F8 D1 9D AD 9F E4 A8 D0 A2 19 F7 62 7B 9C 44 13 6B BA C9 89 3D EA C8 C2 3A 11
89 AD AD 34 78 13 5C 14 76 C3 1C 50 5D 15 F1 7C 15 64 96 92 67 8F 0A DA FE 07 13 14 42 3C B9 F8
1E EC E3 D2 09 CB E6 67 4B 27 1B 5E D5 0B A8 F6 66 55 73 9C 99 29 FD A6 79 45 A6 D1 B8 43 C9 61
1A A1 81 7F 02 FD D5 5D 3D F7 E9 8E C8 96 A5 FE 47 BE F7 F4 40 A5 27 3A 82 1D 32 4A B2 BC 22 1F
1B 63 74 38 20 95 28 92 52 C0 C1 8F 91 F0 0A B9 F9 52 B3 47 C2 65 EA CD 85 10 F2 F8 83 7D 85 D6
59 07 B9 F8 3A 0E 08 90 0B E9 0F EE 53 8B A6 96 76 12 15 08 1E D9 3D 5D 68 BB FB 71 9E 2C 02 58
27 32 66 E5 4E 25 18 C1 08 C0 94 88 44 7C AA 97 23 3B B5 14 5C 8D 21 66 92 8B A6 B0 B5 C1 20 C0
43 01 9F 47 7C 64 A0 85 E5 F4 3B 25 D3 EC 78 54 2A 0D 3F D0 60 BD 92 C2 37 3C F6 5D 1C 34 18 4C
BA 8B 7B DD 01 1F EF 8C 33 B2 07 A8 97 8D CD 02 55 00 C5 85 CE 4D 90 1A CF 39 F5 A8 85 77 3E DB
BA 48 5F 74 90 E8 BD 03 85 54 63 B6 B9 F2 78 76 A6 4D 73 18 3E 4C 4B 43 45 EA 1A EB 82 42 5C 9D
E3 05 C3 2F 5A 15 1B 17 77 35 56 1C BD F7 CE E1 FE E0 72 99 42 CA 1B F7 24 B3 C4 FE 50 94 F9 28
DD 1A 0C 59 36 0B A9 4E 62 5A 9C 55 B2 0A C1 04 67 7A 23 54 EA 93 D6 FE B9 47 A4 2C 63 F4 2C 4B
FE C4 C7 59 65 7D FE 2C D7 F3 32 2C F9 C4 95 6E F0 AB 0D 6B 83 1E B7 3B 8D 04 88 52 D7 D2 DA CD
37 76 B6 9A AD F0 AF 3C 41 B4 C7 39 7B 08 6E 40 1F E9 3B 57 D7 67 AB 59 47 78 F4 E8 ED FA 98 D0
97 ED E9 F4 50 6E D0 8E 9A ED 19 82 3C B9 DE 38 5A 21 2E 0C 74 DD 5C FB 8E AB BA BB 11 19 E8 F4
D8 3E 38 BB 6C D7 13 39 F0 DF 04 B9 55 DC 9C C4 2A C2 F9 8E 5E C4 D8 FD 65 B3 70 1A 72 16 79 70
0F B2 4A BB 40 12 6C 50 22 1B 4B F4 AE 6F 84 18 D6 A0 04 82 AB C5 39 E8 03 C3 D3 CD B6 B7 3A 8D
DD 03 90 8D 89 61 5D BA 75 2C 56 80 4C B6 60 68 31 F4 34 99 0C 35 14 B3 F4 CA BB 5E B5 CC 7A 92
2B FD 65 4F C1 CA 6C 01 DD 06 D1 FA 6E 75 AE 14 FD 85 5C 25 93 42 5B 48 B0 84 14 71 E6 17 2D DB
B1 E9 46 4C E1 86 D9 6F 77 56 CF 5B 06 5C C4 27 89 2A AC 99 61 59 49 CF 03 2A C3 E6 43 6C BE 6D
1D 08 3D 22 79 56 46 11 37 2A DB 71 19 0D 66 F2 E9 1F 9D 84 67 AA E9 84 46 7C 03 6D B2 7B D2 7A
6D BF 66 B7 A1 4B 10 EF 04 5A 76 BA 75 A3 18 CF 8C 39 65 66 91 23 CD 2F 29 58 A5 37 98 E7 89 08
B4 96 33 E2 DF F4 F6 59 2D BA B0 2A 2F ED 6E 01 68 F9 3A C2 7C B6 CF 24 CA E8 4C 89 5A F8 73 48
09 C4 69 E1 9B F2 A1 AA 6E 2C C2 2F 40 E5 8A B0 F0 37 A4 60 20 82 98 AC 20 91 B5 0C 2D 3B 9D 87
A6 78 EB 47 9C E0 48 98 90 16 57 14 C4 6F 77 69 F4 B6 C1 D9 CF 3C 11 40 F9 6C B8 9D 8C 53 72 B8
EE 30 BA C4 70 03 4A 71 11 19 E6 36 E1 D7 19 F9 BE 90 50 F7 C9 D9 A3 92 90 EF 5B 63 FE 37 5C 3B
B2 4B 13 8B A2 60 6F C3 62 96 2E D7 89 38 7B F5 01 8F 2C BB 13 A7 B4 EE 03 AD 63 F7 37 B2 17 BD
32 28 CB D2 51 6F 84 40 41 8D A9 20 9F C0 5A D1 EF 46 DA CD F7 B2 67 C7 39 F5 08 3D E2 66 CB 66
3E C2 DB 35 3B 35 CB 0C CC 74 10 A2 80 13 CB 98 FB 43 CF FD FB 81 C2 39 2B 42 9C D9 19 FC DB 67
        %>;
		
		address_list = []; address_list[127] = void;

		for(var i = 0; i < 4096; i += 4) {
		    EncryptionControlBlock.add(
                (tempBlock[i]) |
                (tempBlock[i+1] << 8) |
                (tempBlock[i+2] << 16) |
                (tempBlock[i+3] << 24)
                );
		}
	}
    
    var xcode_seed;
    function xcode_rand() {
        var seed = xcode_seed;
        xcode_seed = (1103515245 * seed + 12345) & 0xFFFFFFFF;
        //Debug.message("xcode_rand: " + xcode_seed);
        return (xcode_seed ^ (seed << 16) ^ (seed >> 16)) & 0xFFFFFFFF;
    }

    var xcode_op_mov_val = 0;
    var xcode_op_mov_reg = 1;
    var xcode_op_not = 2;
    var xcode_op_neg = 3;
    var xcode_op_inc = 4;
    var xcode_op_dec = 5;
    var xcode_op_add_val = 6;
    var xcode_op_sub_val = 7;
    var xcode_op_xor_val = 8;
    var xcode_op_add_reg = 9;
    var xcode_op_sub_reg = 10;
    var xcode_op_push = 11;
    var xcode_op_pop = 12;
    var xcode_op_shr_reg = 13;
    var xcode_op_shl_reg = 14;
    var xcode_op_imul_reg = 15;
	var xcode_op_load_arg = 16;
    var xcode_op_interlace = 79;
    var xcode_op_table_ECB = 80;

    function xcode_push(xcode, n, inst)
    {
        xcode[0] += n;
        if(xcode[0] > 128) return false;
        xcode.add(inst);
        return true;
    }

    function xcode_building_first_stage(xcode)
    {
        switch (xcode_rand() % 3) {
            case 0
               :// MOV ESI, EncryptionControlBlock : BE
                // MOV EAX, DWORD PTR DS:[ESI+((xcode_rand() & 0x3ff) << 2)]
                xcode[0] += 7;
                if(xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_mov_val, EncryptionControlBlock[xcode_rand() & 0x3ff]]))
                    return false;
                break;
            case 2
               :// MOV EAX, xcode_rand() : B8
                if(++xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_mov_val, xcode_rand()]))
                    return false;
                break;
            case 1
               :// MOV EAX, EDI : C7 8B
                if(!xcode_push(xcode, 2, [xcode_op_load_arg]))
                    return false;
                break;
        }
        return true;
    }

    function xcode_building_stage0(xcode, stage)
    {
        //Debug.message("xcode_building_stage0: " + stage);
        if (stage-- == 1)
            return xcode_building_first_stage(xcode);

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        switch (xcode_rand() & 7) {
            case 4
               :// NOT EAX :D0 F7
                if(!xcode_push(xcode, 2, [xcode_op_not]))
                    return false;
                break;
            case 6
               :// NEG EAX : D8 F7
                if(!xcode_push(xcode, 2, [xcode_op_neg]))
                    return false;
                break;
            case 1
               :// INC EAX : 40
                if(!xcode_push(xcode, 1, [xcode_op_inc]))
                    return false;
                break;
            case 7
               :// DEC EAX :48
                if(!xcode_push(xcode, 1, [xcode_op_dec]))
                    return false;
                break;
            case 0
               :// PUSH EBX : 53
                // MOV EBX, EAX
                // AND EBX, AAAAAAAA
                // AND EAX, 55555555
                // SHR EBX, 1
                // SHL EAX, 1
                // OR EAX, EBX
                // POP EBX
                if(!xcode_push(xcode, 21, [xcode_op_interlace]))
                    return false;
                break;
            case 3
               :// XOR EAX, xcode_rand() : 35
                if(++xcode[0] > 128) return false;
                if(!xcode_push(xcode, 4, [xcode_op_xor_val, xcode_rand()]))
                    return false;
                break;
            case 5
               :if ( xcode_rand() & 1) {
					if(++xcode[0] > 128) return false;
                    // ADD EAX, xcode_rand()
                    if(!xcode_push(xcode, 4, [xcode_op_add_val, xcode_rand()]))
                        return false;
                } else {
					if(++xcode[0] > 128) return false;
                    // SUB EAX, xcode_rand()
                    if(!xcode_push(xcode, 4, [xcode_op_sub_val, xcode_rand()]))
                        return false;
                }
                break;
            case 2
               :// MOV ESI, EncryptionControlBlock : BE
                // AND EAX, 3FFh
                // MOV EAX, DWORD PTR DS:[ESI+EAX*4]
                if(!xcode_push(xcode, 1+4+1+4+3, [xcode_op_table_ECB]))
                    return false;
                break;
        }
        return true;
    }

    function xcode_building_stage1(xcode, stage)
    {
        //Debug.message("xcode_building_stage1: " + stage);
        if (stage-- == 1)
            return xcode_building_first_stage(xcode);
        
        // PUSH EBX
        if(!xcode_push(xcode, 1, [xcode_op_push])) return false;

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        // MOV EBX, EAX
        if(!xcode_push(xcode, 2, [xcode_op_mov_reg]))
            return false;

        if (xcode_rand() & 1) {
            if(!xcode_building_stage1(xcode, stage)) return false;
        } else {
            if(!xcode_building_stage0(xcode, stage)) return false;
        }

        switch (xcode_rand() % 6) {
            case 1
               :// ADD EAX, EBX  : D8 01
                if(!xcode_push(xcode, 2, [xcode_op_add_reg]))
                    return false;
                break;
            case 5
               :// SUB EAX, EBX : D8 29
                if(!xcode_push(xcode, 2, [xcode_op_sub_reg]))
                    return false;
                break;
            case 2
               :// NEG EAX, ADD EAX, EBX : D8 F7
                if(!xcode_push(xcode, 2, [xcode_op_neg]) ||
                   !xcode_push(xcode, 2, [xcode_op_add_reg]))
                    return false;
                break;
            case 3
               :// IMUL EAX, EBX : C3 AF 0F
                if(!xcode_push(xcode, 3, [xcode_op_imul_reg]))
                    return false;
                break;
            case 0
               :// PUSH ECX : 51
                // MOV ECX, EBX
                // AND ECX, 0F
                // SHL EAX, CL : E0 D3
                // POP ECX
                if(!xcode_push(xcode, 1+2+3+2+1, [xcode_op_shl_reg]))
                    return false;
                break;
            case 4
               :// PUSH ECX : 51
                // MOV ECX, EBX
                // AND ECX, 0F
                // SHR EAX, CL : E8 D3
                // POP ECX
                if(!xcode_push(xcode, 1+2+3+2+1, [xcode_op_shr_reg]))
                    return false;
                break;
        }
        // POP EBX
        if(!xcode_push(xcode, 1, [xcode_op_pop]))
            return false;
        return true;
    }

    function xcode_building(seed)
    {
        xcode_seed = seed;
        var xcode;
        for (var stage = 5; stage > 0; --stage) {
            xcode = [5 + 4]; // xcode limit = 128
            if(xcode_building_stage1(xcode, stage) && xcode[0] + 5 + 1 <= 128)
                break;
        }
		// compile function
		var funcstr = [
			"function(arg) {",
			"var v,v2,st=[];"
		];
		for (var i = 1; i < xcode.count; ++i) {
            var inst = xcode[i];
			switch(inst[0]) { // op
                case 0://xcode_op_mov_val:
                    funcstr.add("v=" + inst[1] + ";");
                    break;
				case 16://xcode_op_load_arg:
					funcstr.add("v=arg;");
					break;
                case 1://xcode_op_mov_reg:
					funcstr.add("v2=v;");
                    break;
                case 2://xcode_op_not:
					funcstr.add("v^=0xFFFFFFFF;");
                    break;
                case 3://xcode_op_neg:
					funcstr.add("v=-v;v&=0xFFFFFFFF;");
                    break;
                case 4://xcode_op_inc:
					funcstr.add("++v;v&=0xFFFFFFFF;");
                    break;
                case 5://xcode_op_dec:
					funcstr.add("--v;v&=0xFFFFFFFF;");
                    break;
                case 6://xcode_op_add_val:
					funcstr.add("v+=" + inst[1] + ";v&=0xFFFFFFFF;");
                    break;
                case 7://xcode_op_sub_val:
					funcstr.add("v-=" + inst[1] + ";v&=0xFFFFFFFF;");
                    break;
                case 8://xcode_op_xor_val:
					funcstr.add("v^=" + inst[1] + ";");
                    break;
                case 9://xcode_op_add_reg:
					funcstr.add("v+=v2;v&=0xFFFFFFFF;");
                    break;
                case 10://xcode_op_sub_reg:
					funcstr.add("v-=v2;v&=0xFFFFFFFF;");
                    break;
                case 11://xcode_op_push:
					funcstr.add("st.add(v2);");
                    break;
                case 12://xcode_op_pop:
					funcstr.add("v2=st.pop();");
                    break;
                case 13://xcode_op_shr_reg:
					funcstr.add("v>>=v2&0xF;");
                    break;
                case 14://xcode_op_shl_reg:
					funcstr.add("v<<=v2&0xF;v&=0xFFFFFFFF;");
                    break;
                case 15://xcode_op_imul_reg:
					funcstr.add("v*=v2;v&=0xFFFFFFFF;");
                    break;
                case 80://xcode_op_table_ECB:
					funcstr.add("v=EncryptionControlBlock[v&0x3FF];");
                    break;
                case 79://xcode_op_interlace:
                    // PUSH EBX
                    // MOV EBX, EAX
                    // AND EBX, AAAAAAAA
                    // AND EAX, 55555555
                    // SHR EBX, 1
                    // SHL EAX, 1
                    // OR EAX, EBX
                    // POP EBX
					funcstr.add("v = ((v & 0xAAAAAAAA) >> 1) | ((v & 0x55555555) << 1);");
                    break;
            }
		}
		funcstr.add("return v&0xFFFFFFFF;}");
        return funcstr.join("\n")! incontextof this;
    }

    function cxdec_execute_xcode(hash)
    {
        var index = hash & 0x7f;
        hash = hash >> 7;	

        if (!address_list[index]) {
            address_list[index] = xcode_building(index);
        }
        return [address_list[index](hash), address_list[index](hash^0xFFFFFFFF)];
    }

    function __cxdec_decode(hash, offset, buf, len)
    {
        var ret = cxdec_execute_xcode(hash);

        var key_8 = (ret[0] >> 8) & 0xFF;
        var key_9 = (ret[0] >> 16) & 0xFF;
        var key_10 = ret[0] & 0xFF;
        var key1 = ret[1] >> 16;
        var key2 = ret[1] & 0xffff;

        if (key1 == key2)
            ++key2;
	
        if (!key_10)
            key_10 = 1;

        if ((key2 >= offset) && (key2 < offset + len))
            buf[key2 - offset] ^= key_9;
	
        if ((key1 >= offset) && (key1 < offset + len))
            buf[key1 - offset] ^= key_8;

        buf.xor(0, len, key_10);
    }

    function cxdec_decode(hash, offset, buf, len)
    {
        var bondary = (hash & 0x206) + 77;
        var dec_len;
        if (offset < bondary) {
            if (offset + len > bondary)
                dec_len = bondary - offset;
            else
                dec_len = len;
            __cxdec_decode(hash, offset, buf, dec_len);
            offset += dec_len;
            buf.ptr += dec_len;
            dec_len = len - dec_len;
        } else
            dec_len = len;

        if (dec_len)
            __cxdec_decode((hash >> 16) ^ hash, offset, buf, dec_len);
    }
}

Storages.setXP3ArchiveExtractionFilter((new cxdec()).cxdec_decode);